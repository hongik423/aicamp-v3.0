/**
 * üåê Ïã§Ï†ú ÏõπÏÇ¨Ïù¥Ìä∏ÏóêÏÑú AI Î¨¥Î£åÏßÑÎã® ÏãúÏä§ÌÖú ÌÖåÏä§Ìä∏
 * 
 * ÌÖåÏä§Ìä∏ ÎåÄÏÉÅ:
 * 1. ÏßÑÎã® ÌéòÏù¥ÏßÄ Î°úÎìú
 * 2. Ìèº Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†•
 * 3. ÏßÑÎã® Ïã§Ìñâ
 * 4. Í≤∞Í≥º ÌëúÏãú
 * 5. Ïù¥Î©îÏùº Î∞úÏÜ° Í∏∞Îä•
 * 
 * Î™©Ìëú: Ïã§Ï†ú ÏÇ¨Ïö©Ïûê Í≤ΩÌóò Í≤ÄÏ¶ù
 */

const https = require('https');

// ÌÖåÏä§Ìä∏ ÏÑ§Ï†ï
const TEST_CONFIG = {
  baseUrl: 'https://aicamp-v3-0.vercel.app',
  diagnosisPage: '/services/diagnosis',
  timeout: 60000
};

/**
 * 1. ÏßÑÎã® ÌéòÏù¥ÏßÄ Ï†ëÍ∑ºÏÑ± ÌÖåÏä§Ìä∏
 */
async function testDiagnosisPageAccess() {
  console.log('üåê [1Îã®Í≥Ñ] ÏßÑÎã® ÌéòÏù¥ÏßÄ Ï†ëÍ∑ºÏÑ± ÌÖåÏä§Ìä∏...\n');

  return new Promise((resolve) => {
    const options = {
      hostname: 'aicamp-v3-0.vercel.app',
      port: 443,
      path: '/services/diagnosis',
      method: 'GET',
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'ko-KR,ko;q=0.8,en-US;q=0.5,en;q=0.3',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1'
      },
      timeout: 15000
    };

    const req = https.request(options, (res) => {
      let data = '';
      
      res.on('data', chunk => {
        data += chunk;
      });

      res.on('end', () => {
        console.log(`ÌéòÏù¥ÏßÄ Î°úÎìú ÏÉÅÌÉú: ${res.statusCode}`);
        console.log(`ÏùëÎãµ ÌÅ¨Í∏∞: ${data.length} bytes`);
        
        // Ï§ëÏöîÌïú ÏöîÏÜåÎì§ ÌôïÏù∏
        const checks = {
          hasNextData: data.includes('__NEXT_DATA__'),
          hasTitle: data.includes('AI Î¨¥Î£åÏßÑÎã®') || data.includes('ÏßÑÎã®'),
          hasForm: data.includes('form') || data.includes('input'),
          hasReact: data.includes('react') || data.includes('_app'),
          hasCSS: data.includes('css') || data.includes('style'),
          hasScript: data.includes('script'),
          hasDiagnosisKeyword: data.includes('ÏßÑÎã®') || data.includes('diagnosis'),
          hasCompanyField: data.includes('ÌöåÏÇ¨Î™Ö') || data.includes('company'),
          hasSubmitButton: data.includes('Ï†úÏ∂ú') || data.includes('submit') || data.includes('ÏãúÏûë')
        };

        console.log('\nÌéòÏù¥ÏßÄ Íµ¨ÏÑ± ÏöîÏÜå ÌôïÏù∏:');
        Object.entries(checks).forEach(([key, value]) => {
          console.log(`   ${key}: ${value ? '‚úÖ' : '‚ùå'}`);
        });

        // ÌéòÏù¥ÏßÄ ÏΩòÌÖêÏ∏† ÏùºÎ∂Ä Ï∂úÎ†• (ÎîîÎ≤ÑÍπÖÏö©)
        if (data.length > 0) {
          console.log('\nÌéòÏù¥ÏßÄ ÎÇ¥Ïö© ÏÉòÌîå (Ï≤òÏùå 500Ïûê):');
          console.log(data.substring(0, 500).replace(/\s+/g, ' '));
        }

        resolve({
          success: res.statusCode === 200,
          statusCode: res.statusCode,
          contentLength: data.length,
          checks: checks,
          hasEssentialElements: checks.hasNextData && checks.hasForm && checks.hasDiagnosisKeyword
        });
      });
    });

    req.on('error', (error) => {
      console.log(`‚ùå ÌéòÏù¥ÏßÄ Î°úÎìú Ïã§Ìå®: ${error.message}`);
      resolve({ success: false, error: error.message });
    });

    req.on('timeout', () => {
      console.log('‚ùå ÌéòÏù¥ÏßÄ Î°úÎìú ÌÉÄÏûÑÏïÑÏõÉ');
      req.destroy();
      resolve({ success: false, error: 'Page load timeout' });
    });

    req.end();
  });
}

/**
 * 2. API Ìò∏Ï∂ú ÏãúÎÆ¨Î†àÏù¥ÏÖò ÌÖåÏä§Ìä∏
 */
async function testDiagnosisAPISimulation() {
  console.log('\nüéØ [2Îã®Í≥Ñ] ÏßÑÎã® API Ìò∏Ï∂ú ÏãúÎÆ¨Î†àÏù¥ÏÖò...\n');

  const testData = {
    // Í∏∞Î≥∏ Ï†ïÎ≥¥
    companyName: 'WEB_TEST_COMPANY',
    industry: 'ITÏÑúÎπÑÏä§',
    contactManager: 'ÏõπÌÖåÏä§Ìä∏Îã¥ÎãπÏûê',
    phone: '010-8888-9999',
    email: 'webtest@aicamp.co.kr',
    employeeCount: '10-50Î™Ö',
    businessLocation: 'ÏÑúÏö∏ÌäπÎ≥ÑÏãú',
    growthStage: 'growth',
    
    // 20Í∞ú ÌèâÍ∞Ä Ìï≠Î™©
    planning_level: 4,
    differentiation_level: 4,
    pricing_level: 3,
    expertise_level: 4,
    quality_level: 5,
    customer_greeting: 4,
    customer_service: 4,
    complaint_management: 3,
    customer_retention: 4,
    customer_understanding: 4,
    marketing_planning: 4,
    offline_marketing: 3,
    online_marketing: 4,
    sales_strategy: 4,
    purchase_management: 4,
    inventory_management: 3,
    exterior_management: 4,
    interior_management: 4,
    cleanliness: 5,
    work_flow: 4,
    
    // Ï∂îÍ∞Ä Ï†ïÎ≥¥
    mainConcerns: 'ÏõπÏÇ¨Ïù¥Ìä∏ÏóêÏÑú ÏßÅÏ†ë ÌÖåÏä§Ìä∏ÌïòÎäî AI ÏßÑÎã® ÏãúÏä§ÌÖúÏùò ÏôÑÏ†ÑÌïú ÎèôÏûëÏùÑ ÌôïÏù∏ÌïòÍ∏∞ ÏúÑÌïú ÌÖåÏä§Ìä∏ÏûÖÎãàÎã§.',
    expectedBenefits: 'Ïã§Ï†ú ÏÇ¨Ïö©ÏûêÍ∞Ä Í≤™ÏùÑ Ïàò ÏûàÎäî Î™®Îì† ÏÉÅÌô©ÏùÑ ÏãúÎÆ¨Î†àÏù¥ÏÖòÌïòÏó¨ ÏãúÏä§ÌÖúÏùò ÏïàÏ†ïÏÑ±ÏùÑ Í≤ÄÏ¶ùÌï©ÎãàÎã§.',
    privacyConsent: true,
    submitDate: new Date().toISOString()
  };

  const postData = JSON.stringify(testData);
  
  return new Promise((resolve) => {
    const options = {
      hostname: 'aicamp-v3-0.vercel.app',
      port: 443,
      path: '/api/simplified-diagnosis',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData),
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'application/json',
        'Origin': 'https://aicamp-v3-0.vercel.app',
        'Referer': 'https://aicamp-v3-0.vercel.app/services/diagnosis',
        'X-Requested-With': 'XMLHttpRequest'
      },
      timeout: 60000
    };

    console.log('API ÏöîÏ≤≠ Ï†ÑÏÜ° Ï§ë...');
    console.log(`Îç∞Ïù¥ÌÑ∞ ÌÅ¨Í∏∞: ${postData.length} bytes`);

    const startTime = Date.now();

    const req = https.request(options, (res) => {
      let responseData = '';
      
      res.on('data', chunk => {
        responseData += chunk;
      });

      res.on('end', () => {
        const processingTime = Date.now() - startTime;
        
        console.log(`\nAPI ÏùëÎãµ ÏàòÏã†:`);
        console.log(`   ÏÉÅÌÉú ÏΩîÎìú: ${res.statusCode}`);
        console.log(`   Ï≤òÎ¶¨ ÏãúÍ∞Ñ: ${processingTime}ms`);
        console.log(`   ÏùëÎãµ ÌÅ¨Í∏∞: ${responseData.length} bytes`);

        try {
          const jsonResponse = JSON.parse(responseData);
          console.log(`   JSON ÌååÏã±: ‚úÖ ÏÑ±Í≥µ`);
          console.log(`   ÏÑ±Í≥µ Ïó¨Î∂Ä: ${jsonResponse.success ? '‚úÖ' : '‚ùå'}`);
          
          if (jsonResponse.success && jsonResponse.data) {
            const diagnosis = jsonResponse.data.diagnosis;
            console.log(`\nÏßÑÎã® Í≤∞Í≥º ÌôïÏù∏:`);
            console.log(`   ÌöåÏÇ¨Î™Ö: ${diagnosis?.companyName || 'N/A'}`);
            console.log(`   Ï¥ùÏ†ê: ${diagnosis?.totalScore || 'N/A'}Ï†ê`);
            console.log(`   Îì±Í∏â: ${diagnosis?.overallGrade || 'N/A'}`);
            console.log(`   Ïã†Î¢∞ÎèÑ: ${diagnosis?.reliabilityScore || 'N/A'}%`);
            console.log(`   Î≥¥Í≥†ÏÑú: ${jsonResponse.data.summaryReport ? '‚úÖ ÏÉùÏÑ±Îê®' : '‚ùå ÏóÜÏùå'}`);
            
            if (jsonResponse.data.summaryReport) {
              console.log(`   Î≥¥Í≥†ÏÑú Í∏∏Ïù¥: ${jsonResponse.data.summaryReport.length}Ïûê`);
            }
          }

          resolve({
            success: true,
            statusCode: res.statusCode,
            processingTime: processingTime,
            data: jsonResponse,
            isValidResponse: !!(jsonResponse.success && jsonResponse.data)
          });

        } catch (parseError) {
          console.log(`   JSON ÌååÏã±: ‚ùå Ïã§Ìå®`);
          console.log(`   ÏõêÎ≥∏ ÏùëÎãµ: ${responseData.substring(0, 200)}...`);
          
          resolve({
            success: false,
            statusCode: res.statusCode,
            processingTime: processingTime,
            error: 'JSON ÌååÏã± Ïã§Ìå®',
            rawResponse: responseData.substring(0, 500)
          });
        }
      });
    });

    req.on('error', (error) => {
      console.log(`‚ùå API ÏöîÏ≤≠ Ïã§Ìå®: ${error.message}`);
      resolve({
        success: false,
        error: error.message,
        processingTime: Date.now() - startTime
      });
    });

    req.on('timeout', () => {
      console.log('‚ùå API ÏöîÏ≤≠ ÌÉÄÏûÑÏïÑÏõÉ');
      req.destroy();
      resolve({
        success: false,
        error: 'API timeout',
        processingTime: Date.now() - startTime
      });
    });

    req.write(postData);
    req.end();
  });
}

/**
 * 3. Ï†ïÏ†Å ÏûêÏõê Î°úÎìú ÌÖåÏä§Ìä∏
 */
async function testStaticAssets() {
  console.log('\nüì¶ [3Îã®Í≥Ñ] Ï†ïÏ†Å ÏûêÏõê Î°úÎìú ÌÖåÏä§Ìä∏...\n');

  const staticPaths = [
    '/_next/static/css/',
    '/_next/static/chunks/',
    '/favicon.ico'
  ];

  const results = await Promise.allSettled(staticPaths.map(path => {
    return new Promise((resolve) => {
      const options = {
        hostname: 'aicamp-v3-0.vercel.app',
        port: 443,
        path: path,
        method: 'HEAD',
        timeout: 10000
      };

      const req = https.request(options, (res) => {
        resolve({
          path: path,
          success: res.statusCode < 400,
          statusCode: res.statusCode
        });
      });

      req.on('error', () => {
        resolve({
          path: path,
          success: false,
          statusCode: 'ERROR'
        });
      });

      req.on('timeout', () => {
        req.destroy();
        resolve({
          path: path,
          success: false,
          statusCode: 'TIMEOUT'
        });
      });

      req.end();
    });
  }));

  console.log('Ï†ïÏ†Å ÏûêÏõê ÏÉÅÌÉú:');
  results.forEach((result) => {
    if (result.status === 'fulfilled') {
      const { path, success, statusCode } = result.value;
      console.log(`   ${path}: ${success ? '‚úÖ' : '‚ùå'} (${statusCode})`);
    }
  });

  const successCount = results.filter(r => r.status === 'fulfilled' && r.value.success).length;
  
  return {
    totalAssets: staticPaths.length,
    successfulAssets: successCount,
    successRate: Math.round((successCount / staticPaths.length) * 100)
  };
}

/**
 * 4. ÏµúÏ¢Ö Í≤∞Í≥º Î∂ÑÏÑù Î∞è Î≥¥Í≥†ÏÑú
 */
function generateWebTestReport(pageResult, apiResult, assetsResult) {
  console.log('\n' + '='.repeat(70));
  console.log('üåê Ïã§Ï†ú ÏõπÏÇ¨Ïù¥Ìä∏ AI Î¨¥Î£åÏßÑÎã® ÏãúÏä§ÌÖú ÌÖåÏä§Ìä∏ Í≤∞Í≥º');
  console.log('='.repeat(70));
  console.log(`üìÖ ÌÖåÏä§Ìä∏ ÏôÑÎ£å ÏãúÍ∞Ñ: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}`);
  console.log(`üåç ÎåÄÏÉÅ ÏõπÏÇ¨Ïù¥Ìä∏: ${TEST_CONFIG.baseUrl}${TEST_CONFIG.diagnosisPage}\n`);

  // Í∞Å ÏòÅÏó≠Î≥Ñ ÌèâÍ∞Ä
  const evaluations = [
    {
      name: 'ÌéòÏù¥ÏßÄ Î°úÎìú',
      success: pageResult.success && pageResult.hasEssentialElements,
      details: `ÏÉÅÌÉú: ${pageResult.statusCode}, ÌïÑÏàòÏöîÏÜå: ${pageResult.hasEssentialElements ? 'ÏûàÏùå' : 'ÏóÜÏùå'}`
    },
    {
      name: 'ÏßÑÎã® API',
      success: apiResult.success && apiResult.isValidResponse,
      details: `Ï≤òÎ¶¨ÏãúÍ∞Ñ: ${apiResult.processingTime}ms, Ïú†Ìö®ÏùëÎãµ: ${apiResult.isValidResponse ? 'Ïòà' : 'ÏïÑÎãàÏò§'}`
    },
    {
      name: 'Ï†ïÏ†Å ÏûêÏõê',
      success: assetsResult.successRate >= 70,
      details: `ÏÑ±Í≥µÎ•†: ${assetsResult.successRate}% (${assetsResult.successfulAssets}/${assetsResult.totalAssets})`
    }
  ];

  console.log('üìä ÏÑ∏Î∂Ä ÌèâÍ∞Ä Í≤∞Í≥º:');
  evaluations.forEach((eval, index) => {
    console.log(`   ${index + 1}. ${eval.name}: ${eval.success ? '‚úÖ ÏÑ±Í≥µ' : '‚ùå Ïã§Ìå®'}`);
    console.log(`      ‚îî‚îÄ ${eval.details}`);
  });

  const totalSuccess = evaluations.filter(e => e.success).length;
  const totalTests = evaluations.length;

  console.log(`\nüèÜ Ï¢ÖÌï© ÌèâÍ∞Ä:`);
  console.log(`   ÌÜµÍ≥ºÌïú ÏòÅÏó≠: ${totalSuccess}/${totalTests}Í∞ú`);
  console.log(`   Ï†ÑÏ≤¥ ÏÑ±Í≥µÎ•†: ${Math.round((totalSuccess / totalTests) * 100)}%`);

  // ÏãúÏä§ÌÖú ÏÉÅÌÉú ÌåêÏ†ï
  let systemStatus, recommendation;
  
  if (totalSuccess === totalTests) {
    systemStatus = '‚úÖ ÏôÑÎ≤Ω - Î™®Îì† Í∏∞Îä•Ïù¥ Ï†ïÏÉÅ ÏûëÎèô';
    recommendation = 'üéâ AICAMP AI Î¨¥Î£åÏßÑÎã® ÏãúÏä§ÌÖúÏù¥ ÏôÑÎ≤ΩÌïòÍ≤å ÏûëÎèôÌïòÍ≥† ÏûàÏäµÎãàÎã§!';
  } else if (totalSuccess >= 2) {
    systemStatus = '‚ö†Ô∏è ÏñëÌò∏ - Ï£ºÏöî Í∏∞Îä• Ï†ïÏÉÅ, ÏùºÎ∂Ä Í∞úÏÑ† ÌïÑÏöî';
    recommendation = 'üîß ÏùºÎ∂Ä Í∏∞Îä•ÏùÑ Í∞úÏÑ†ÌïòÎ©¥ ÎçîÏö± ÏïàÏ†ïÏ†ÅÏù∏ ÏÑúÎπÑÏä§Í∞Ä Îê©ÎãàÎã§.';
  } else {
    systemStatus = '‚ùå Í∞úÏÑ† ÌïÑÏöî - Ï£ºÏöî Í∏∞Îä•Ïóê Î¨∏Ï†ú ÏûàÏùå';
    recommendation = 'üö® Ï§ëÏöîÌïú Î¨∏Ï†úÎì§ÏùÑ Ïö∞ÏÑ† Ìï¥Í≤∞Ìï¥Ïïº Ìï©ÎãàÎã§.';
  }

  console.log(`   ÏãúÏä§ÌÖú ÏÉÅÌÉú: ${systemStatus}`);
  console.log(`\nüí° Í∂åÏû•ÏÇ¨Ìï≠:`);
  console.log(`   ${recommendation}`);

  // ÏÇ¨Ïö©Ïûê Í≤ΩÌóò Î∂ÑÏÑù
  if (apiResult.processingTime) {
    console.log(`\n‚è±Ô∏è ÏÇ¨Ïö©Ïûê Í≤ΩÌóò Î∂ÑÏÑù:`);
    if (apiResult.processingTime < 5000) {
      console.log(`   ÏùëÎãµ ÏÜçÎèÑ: ‚úÖ Îπ†Î¶Ñ (${apiResult.processingTime}ms)`);
    } else if (apiResult.processingTime < 15000) {
      console.log(`   ÏùëÎãµ ÏÜçÎèÑ: ‚ö†Ô∏è Î≥¥ÌÜµ (${apiResult.processingTime}ms)`);
    } else {
      console.log(`   ÏùëÎãµ ÏÜçÎèÑ: ‚ùå ÎäêÎ¶º (${apiResult.processingTime}ms) - ÏµúÏ†ÅÌôî ÌïÑÏöî`);
    }
  }

  console.log('\nüèÅ ÏõπÏÇ¨Ïù¥Ìä∏ ÌÖåÏä§Ìä∏ ÏôÑÎ£å');

  return {
    totalTests,
    successfulTests: totalSuccess,
    successRate: Math.round((totalSuccess / totalTests) * 100),
    systemStatus: totalSuccess === totalTests ? 'PERFECT' : totalSuccess >= 2 ? 'GOOD' : 'NEEDS_IMPROVEMENT',
    processingTime: apiResult.processingTime,
    recommendations: recommendation
  };
}

/**
 * Î©îÏù∏ Ïõπ ÌÖåÏä§Ìä∏ Ïã§Ìñâ
 */
async function runWebDiagnosisTest() {
  console.log('üåê Ïã§Ï†ú ÏõπÏÇ¨Ïù¥Ìä∏ AI Î¨¥Î£åÏßÑÎã® ÏãúÏä§ÌÖú ÌÖåÏä§Ìä∏ ÏãúÏûë');
  console.log('Î™©Ìëú: Ïã§Ï†ú ÏÇ¨Ïö©Ïûê Í≤ΩÌóò Í≤ÄÏ¶ù');
  console.log('='.repeat(70));

  try {
    // Í∞Å Îã®Í≥ÑÎ≥Ñ ÌÖåÏä§Ìä∏ Ïã§Ìñâ
    const pageResult = await testDiagnosisPageAccess();
    const apiResult = await testDiagnosisAPISimulation();
    const assetsResult = await testStaticAssets();

    // ÏµúÏ¢Ö Í≤∞Í≥º Î∂ÑÏÑù
    const report = generateWebTestReport(pageResult, apiResult, assetsResult);
    
    return report;

  } catch (error) {
    console.error('\n‚ùå Ïõπ ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ï§ë ÏπòÎ™ÖÏ†Å Ïò§Î•ò:', error.message);
    return { systemStatus: 'CRITICAL_ERROR', error: error.message };
  }
}

// ÌÖåÏä§Ìä∏ Ïã§Ìñâ
runWebDiagnosisTest()
  .then(report => {
    process.exit(report.systemStatus === 'PERFECT' ? 0 : 1);
  })
  .catch(error => {
    console.error('Ïõπ ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ïã§Ìå®:', error);
    process.exit(2);
  }); 