/**
 * Google Apps Script CORS ÌîÑÎ°ùÏãú API
 * Î∏åÎùºÏö∞Ï†ÄÏùò CORS Ï†ïÏ±ÖÏùÑ Ïö∞ÌöåÌïòÏó¨ Google Apps ScriptÏôÄ ÌÜµÏã†
 */

import { NextRequest, NextResponse } from 'next/server';
import { getGasUrl } from '@/lib/config/env';

export async function POST(request: NextRequest) {
  try {
    const requestData = await request.json();
    const gasUrl = getGasUrl();

    if (!gasUrl) {
      return NextResponse.json({
        success: false,
        error: 'Google Apps Script URLÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
      }, { status: 500 });
    }

    console.log('üîÑ Google Apps Script V22.0 ÌîÑÎ°ùÏãú ÏöîÏ≤≠:', {
      url: gasUrl.substring(0, 50) + '...',
      method: 'POST',
      action: requestData.action || 'unknown',
      type: requestData.type || 'unknown',
      diagnosisId: requestData.diagnosisId || 'N/A',
      version: requestData.version || 'N/A'
    });

    // Google Apps Script ÌÉÄÏûÑÏïÑÏõÉÏùÑ 890Ï¥àÎ°ú ÏÑ§Ï†ï (Vercel Pro Fluid Compute)
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 890000); // 890Ï¥à ÌÉÄÏûÑÏïÑÏõÉ

    console.log('üöÄ Google Apps Script V22.0 Í∞ïÌôîÎêú ÏïàÏ†ï Î≤ÑÏ†Ñ ÏöîÏ≤≠ Ï†ÑÏÜ° Ï§ë... (ÏµúÎåÄ 14.83Î∂Ñ ÎåÄÍ∏∞)');
    
    let response;
    
    try {
      // Îã®Ïùº ÏöîÏ≤≠ÏúºÎ°ú Î≥ÄÍ≤Ω (Ïû¨ÏãúÎèÑ Î°úÏßÅ Ï†úÍ±∞ÌïòÏó¨ Ï§ëÎ≥µ Ï≤òÎ¶¨ Î∞©ÏßÄ)
      response = await fetch(gasUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'User-Agent': 'AICAMP-Frontend/1.0'
        },
        body: JSON.stringify({
          // V22 GAS Ïä§ÌÅ¨Î¶ΩÌä∏ ÎùºÏö∞ÌåÖ - processDiagnosis Ìï®Ïàò Ìò∏Ï∂ú
          type: requestData.type || 'diagnosis',
          action: requestData.action || 'diagnosis',
          
          // V22 processDiagnosis Ìï®Ïàò Ï†ÑÏö© Îç∞Ïù¥ÌÑ∞
          ...requestData,
          
          // Ï∂îÍ∞Ä Î©îÌÉÄÎç∞Ïù¥ÌÑ∞
          timestamp: new Date().toISOString(),
          userAgent: request.headers.get('user-agent') || 'AICAMP-Frontend',
          referer: request.headers.get('referer') || 'https://aicamp.club',
          gasVersion: 'V22.0-ENHANCED-STABLE',
          clientVersion: 'NextJS-Frontend-V3.0'
        }),
        signal: controller.signal,
      });
      
      console.log(`‚úÖ Google Apps Script ÏùëÎãµ ÏàòÏã†: ${response.status}`);
      
    } catch (fetchError) {
      console.error('‚ùå Google Apps Script ÏöîÏ≤≠ Ïã§Ìå®:', fetchError.message);
      
      // ÌÉÄÏûÑÏïÑÏõÉ Ïò§Î•òÏù∏ Í≤ΩÏö∞ ÏÇ¨Ïö©Ïûê ÏπúÌôîÏ†Å Ï≤òÎ¶¨
      if (fetchError.name === 'AbortError') {
        console.log('‚è∞ ÌÉÄÏûÑÏïÑÏõÉ Î∞úÏÉù - Î∞±Í∑∏ÎùºÏö¥Îìú Ï≤òÎ¶¨ Î™®ÎìúÎ°ú Ï†ÑÌôò');
        
        // ÌÉÄÏûÑÏïÑÏõÉÏù¥ÏßÄÎßå ÏÑ±Í≥µÏúºÎ°ú Ï≤òÎ¶¨ (Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Í≥ÑÏÜç Ï≤òÎ¶¨Îê®)
        return NextResponse.json({
          success: true,
          message: 'ü§ñ AI Ïó≠ÎüâÏßÑÎã®Ïù¥ Ï†ïÏÉÅÏ†ÅÏúºÎ°ú Ï†ëÏàòÎêòÏóàÏäµÎãàÎã§. SWOT Î∂ÑÏÑù Î∞è McKinsey Î≥¥Í≥†ÏÑú ÏÉùÏÑ±Ïù¥ ÏßÑÌñâ Ï§ëÏù¥Î©∞, ÏôÑÎ£å Ïãú Ïù¥Î©îÏùºÎ°ú Î∞úÏÜ°ÎìúÎ¶¨Í≤†ÏäµÎãàÎã§.',
          diagnosisId: requestData.diagnosisId || `TIMEOUT_${Date.now()}`,
          isTimeout: true,
          estimatedTime: '10-15Î∂Ñ',
          backgroundProcessing: true,
          processingSteps: [
            'SWOT Î∂ÑÏÑù ÏßÑÌñâ Ï§ë',
            'McKinsey Î≥¥Í≥†ÏÑú ÏÉùÏÑ± Ï§ë',
            'Ïù¥Î©îÏùº Î∞úÏÜ° ÎåÄÍ∏∞ Ï§ë'
          ]
        }, { 
          status: 200,
          headers: {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type',
          }
        });
      }
      
      throw fetchError;
    }

    try {

      clearTimeout(timeoutId);

      if (!response.ok) {
        console.error('Google Apps Script HTTP Ïò§Î•ò:', response.status, response.statusText);
        
        // 502/503 Ïò§Î•òÏùò Í≤ΩÏö∞ ÏÑúÎ≤Ñ Í≥ºÎ∂ÄÌïòÎ°ú Í∞ÑÏ£ºÌïòÍ≥† Ïû¨ÏãúÎèÑ ÏïàÎÇ¥
        if (response.status === 502 || response.status === 503) {
          return NextResponse.json({
            success: true,
            message: 'ÏÑúÎ≤ÑÍ∞Ä ÏùºÏãúÏ†ÅÏúºÎ°ú Î∞îÏÅ©ÎãàÎã§. ÏöîÏ≤≠Ïù¥ Ï†ëÏàòÎêòÏóàÏúºÎ©∞ Ï≤òÎ¶¨ ÏôÑÎ£å Ïãú Ïù¥Î©îÏùºÎ°ú ÏïàÎÇ¥ÎìúÎ¶¨Í≤†ÏäµÎãàÎã§.',
            diagnosisId: `RETRY_${Date.now()}`,
            isRetry: true,
            estimatedTime: '10-15Î∂Ñ'
          }, { 
            status: 200,
            headers: {
              'Access-Control-Allow-Origin': '*',
              'Access-Control-Allow-Methods': 'POST, OPTIONS',
              'Access-Control-Allow-Headers': 'Content-Type',
            }
          });
        }
        
        return NextResponse.json({
          success: false,
          error: `Google Apps Script ÏÑúÎ≤Ñ Ïò§Î•ò (${response.status})`,
          details: response.statusText
        }, { 
          status: 502,
          headers: {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type',
          },
        });
      }

      const responseText = await response.text();
      console.log('üì• Google Apps Script ÏõêÏãú ÏùëÎãµ:', responseText.substring(0, 200) + '...');

      let responseData;
      try {
        // ÏùëÎãµ ÌÖçÏä§Ìä∏ Ï†ïÎ¶¨ (Ï†úÏñ¥ Î¨∏Ïûê Ï†úÍ±∞)
        const cleanResponseText = responseText.replace(/[\x00-\x1F\x7F-\x9F]/g, '');
        responseData = JSON.parse(cleanResponseText);
      } catch (parseError) {
        console.warn('JSON ÌååÏã± Ïã§Ìå®, ÌÖçÏä§Ìä∏ ÏùëÎãµ Ï≤òÎ¶¨:', parseError);
        console.warn('ÏõêÏãú ÏùëÎãµ (Ï≤òÏùå 500Ïûê):', responseText.substring(0, 500));
        responseData = {
          success: true,
          message: 'ÏöîÏ≤≠Ïù¥ Ï≤òÎ¶¨ÎêòÏóàÏäµÎãàÎã§',
          rawResponse: responseText.substring(0, 1000) // Í∏∏Ïù¥ Ï†úÌïú
        };
      }

      console.log('‚úÖ Google Apps Script ÏùëÎãµ Ï≤òÎ¶¨ ÏôÑÎ£å:', {
        success: responseData.success,
        hasData: !!responseData.data
      });

      return NextResponse.json(responseData, {
        status: 200,
        headers: {
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'POST, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type',
        },
      });

    } catch (fetchError) {
      clearTimeout(timeoutId);
      
      if (fetchError instanceof Error && fetchError.name === 'AbortError') {
        console.error('‚ùå Google Apps Script ÌÉÄÏûÑÏïÑÏõÉ (14.83Î∂Ñ)');
        
        // ÌÉÄÏûÑÏïÑÏõÉ Ïãú Î∞±ÏóÖ Ï≤òÎ¶¨ - ÏöîÏ≤≠ÏùÄ Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Í≥ÑÏÜç ÏßÑÌñâÎê† Ïàò ÏûàÏùå
        return NextResponse.json({
          success: true,
          message: 'ü§ñ AI ÏßÑÎã®Ïù¥ Ï†ëÏàòÎêòÏóàÏäµÎãàÎã§. Í≥†ÌíàÏßà Î≥¥Í≥†ÏÑú ÏÉùÏÑ±ÏùÑ ÏúÑÌï¥ Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ï≤òÎ¶¨ Ï§ëÏù¥Î©∞, ÏôÑÎ£åÎêòÎ©¥ Ïù¥Î©îÏùºÎ°ú ÏïàÎÇ¥ÎìúÎ¶¨Í≤†ÏäµÎãàÎã§.',
          diagnosisId: `TIMEOUT-${Date.now()}`,
          warning: 'Í≥†ÌíàÏßà AI Î∂ÑÏÑùÏùÑ ÏúÑÌï¥ Ï∂îÍ∞Ä ÏãúÍ∞ÑÏù¥ ÏÜåÏöîÎêòÍ≥† ÏûàÏúºÎÇò Ïã†Ï≤≠ÏùÄ Ï†ïÏÉÅ Ï≤òÎ¶¨Îê©ÎãàÎã§.',
          retryable: false,
          statusCode: 'PROCESSING',
          backgroundProcessing: true
        }, { 
          status: 200,
          headers: {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type',
          },
        });
      }
      
      throw fetchError;
    }

  } catch (error) {
    console.error('‚ùå Google Apps Script ÌîÑÎ°ùÏãú Ïò§Î•ò:', error);
    
    return NextResponse.json({
      success: false,
      error: 'Google Apps Script Ïó∞Í≤∞ Ïã§Ìå®',
      details: error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò',
      timestamp: new Date().toISOString()
    }, { 
      status: 500,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type',
      },
    });
  }
}

// GET ÏöîÏ≤≠ÎèÑ Ï≤òÎ¶¨ (Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏Ïö©)
export async function GET() {
  try {
    const gasUrl = getGasUrl();

    if (!gasUrl) {
      return NextResponse.json({
        success: false,
        error: 'Google Apps Script URLÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
      }, { status: 500 });
    }

    console.log('üîç Google Apps Script Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏');

    // ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï (5Ï¥à)
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000);

    try {
      const response = await fetch(gasUrl, {
        method: 'GET',
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        return NextResponse.json({
          success: false,
          status: 'disconnected',
          message: `Ïó∞Í≤∞ Ïã§Ìå®: ${response.status} ${response.statusText}`,
          timestamp: new Date().toISOString()
        }, { 
          status: 200,
          headers: {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type',
          },
        });
      }

      const responseText = await response.text();
      let result;
      try {
        result = JSON.parse(responseText);
      } catch {
        result = { message: 'Ïó∞Í≤∞ ÌôïÏù∏ ÏôÑÎ£å', response: responseText };
      }

      return NextResponse.json({
        success: true,
        status: 'connected',
        message: 'Google Apps Script Ïó∞Í≤∞ Ï†ïÏÉÅ',
        data: result,
        timestamp: new Date().toISOString()
      }, {
        status: 200,
        headers: {
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type',
        },
      });

    } catch (fetchError) {
      clearTimeout(timeoutId);
      
      if (fetchError instanceof Error && fetchError.name === 'AbortError') {
        return NextResponse.json({
          success: false,
          status: 'disconnected',
          message: 'Google Apps Script ÏùëÎãµ ÏãúÍ∞Ñ Ï¥àÍ≥º',
          timestamp: new Date().toISOString()
        }, { 
          status: 200,
          headers: {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type',
          },
        });
      }
      
      throw fetchError;
    }

  } catch (error) {
    console.error('‚ùå Google Apps Script Ïó∞Í≤∞ ÌôïÏù∏ Ïã§Ìå®:', error);
    
    return NextResponse.json({
      success: false,
      status: 'disconnected',
      message: `Google Apps Script Ïó∞Í≤∞ Ïã§Ìå®: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`,
      timestamp: new Date().toISOString()
    }, { 
      status: 200,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type',
      },
    });
  }
}

export async function OPTIONS() {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type',
    },
  });
}