'use client'

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ChevronLeft, ChevronRight, Check, RotateCcw, Save, Loader2, ArrowRight, CheckCircle } from 'lucide-react';
import Image from 'next/image';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { REAL_45_QUESTIONS, RealQuestion } from '../constants/real-45-questions';
import { getQuestionBehaviorIndicators } from '../constants/question-specific-behavior-indicators';
import { AddressInput } from '@/components/ui/address-input';
import { PhoneInput } from '@/components/ui/phone-input';
import { EmailInput } from '@/components/ui/email-input';
// import EnhancedDiagnosisComplete from './EnhancedDiagnosisComplete'; // ÏÇ≠Ï†úÎêú Ïª¥Ìè¨ÎÑåÌä∏

interface CompanyInfo {
  companyName: string;
  contactName: string;
  contactEmail: string;
  contactPhone: string;
  industry: string;
  industryCustom?: string;
  employeeCount: string;
  annualRevenue: string;
  location: string;
}

interface FormState {
  companyInfo: CompanyInfo;
  answers: Record<number, number>; // questionId -> score
  currentQuestion: number;
  isCompleted: boolean;
}

interface DiagnosisResult {
  success: boolean;
  diagnosisId?: string;
  totalScore?: number;
  enhancedScores?: any;
  error?: string;
}

const Real45QuestionForm: React.FC = () => {
  const { toast } = useToast();
  const [isHydrated, setIsHydrated] = useState(false);
  const [formState, setFormState] = useState<FormState>({
    companyInfo: {
      companyName: '',
      contactName: '',
      contactEmail: '',
      contactPhone: '',
      industry: '',
      employeeCount: '',
      annualRevenue: '',
      location: ''
    },
    answers: {},
    currentQuestion: -1, // -1 = Í∏∞ÏóÖÏ†ïÎ≥¥ ÏûÖÎ†•, 0-44 = ÏßàÎ¨∏
    isCompleted: false
  });
  
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showCompanyForm, setShowCompanyForm] = useState(true);
  const [diagnosisResult, setDiagnosisResult] = useState<DiagnosisResult | null>(null);
  const [persistentNoticeOpen, setPersistentNoticeOpen] = useState(false);
  const [showProgressGuide, setShowProgressGuide] = useState(false);
  const [showMissingAnswerAlert, setShowMissingAnswerAlert] = useState(false);
  const [progressData, setProgressData] = useState<any>(null);
  const [progressSteps, setProgressSteps] = useState({
    'data-validation': { status: 'pending', progress: 0, label: 'Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù' },
    'gemini-analysis': { status: 'pending', progress: 0, label: 'AI Î∂ÑÏÑù' },
    'swot-analysis': { status: 'pending', progress: 0, label: 'SWOT Î∂ÑÏÑù' },
    'report-generation': { status: 'pending', progress: 0, label: 'Î≥¥Í≥†ÏÑú ÏÉùÏÑ±' },
    'email-sending': { status: 'pending', progress: 0, label: 'Ïù¥Î©îÏùº Î∞úÏÜ°' }
  });

  // Í∞ÑÎã®Ìïú ÏûÖÎ†• Ìï∏Îì§Îü¨Îì§
  const handleAddressChange = (address: string) => {
    setFormState(prev => ({
      ...prev,
      companyInfo: {
        ...prev.companyInfo,
        location: address
      }
    }));
  };

  const handlePhoneChange = (phone: string) => {
    setFormState(prev => ({
      ...prev,
      companyInfo: {
        ...prev.companyInfo,
        contactPhone: phone
      }
    }));
  };

  const handleEmailChange = (email: string) => {
    setFormState(prev => ({
      ...prev,
      companyInfo: {
        ...prev.companyInfo,
        contactEmail: email
      }
    }));
  };

  // ÏßÑÌñâÎ•† Í≥ÑÏÇ∞
  const progress = formState.currentQuestion === -1 ? 0 : 
    ((formState.currentQuestion + 1) / REAL_45_QUESTIONS.length) * 100;
  
  // ÎãµÎ≥Ä ÏôÑÎ£åÎêú Î¨∏Ìï≠ Ïàò
  const answeredCount = Object.keys(formState.answers).length;

  // Hydration ÏôÑÎ£å Ï≤òÎ¶¨
  useEffect(() => {
    setIsHydrated(true);
    
    // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î≥µÏõê (ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑúÎßå)
    try {
      const savedData = localStorage.getItem('real45QuestionForm');
      if (savedData) {
        const parsedData = JSON.parse(savedData);
        setFormState(parsedData);
        setShowCompanyForm(parsedData.currentQuestion === -1);
      }
    } catch (error) {
      console.error('Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ Îç∞Ïù¥ÌÑ∞ Î≥µÏõê Ïã§Ìå®:', error);
    }
  }, []);

  // Îç∞Ïù¥ÌÑ∞ Î≥ÄÍ≤Ω Ïãú Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû• (Hydration ÏôÑÎ£å ÌõÑÏóêÎßå)
  useEffect(() => {
    if (isHydrated) {
      localStorage.setItem('real45QuestionForm', JSON.stringify(formState));
    }
  }, [formState, isHydrated]);

  // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú cleanup
  useEffect(() => {
    return () => {
      // ÏßÑÌñâ Ï§ëÏù∏ ÏöîÏ≤≠Ïù¥ÎÇò ÌÉÄÏù¥Î®∏Í∞Ä ÏûàÎã§Î©¥ Ï†ïÎ¶¨
      setIsSubmitting(false);
    };
  }, []);

  // ÏßÑÌñâ ÏÉÅÌô© ÏïàÎÇ¥ ÌëúÏãú
  const showProgressGuidance = () => {
    setShowProgressGuide(true);
    setTimeout(() => setShowProgressGuide(false), 5000); // 5Ï¥à ÌõÑ ÏûêÎèô Îã´Í∏∞
  };

  // Ïó≠ÎüâÏßÑÎã® ÏãúÏûë Ïãú ÏßÑÌñâ ÏÉÅÌô© ÏïàÎÇ¥
  useEffect(() => {
    if (!showCompanyForm && formState.currentQuestion === 0) {
      showProgressGuidance();
    }
  }, [showCompanyForm, formState.currentQuestion]);

  // Ïã§Ï†ú ÏßÑÌñâÏÉÅÌô© Í∏∞Î∞ò Ïã§ÏãúÍ∞Ñ Ï∂îÏ†Å
  const startProgressTracking = (diagnosisId: string) => {
    if (!diagnosisId) return;

    console.log('üéØ Ïã§Ï†ú ÏßÑÌñâÏÉÅÌô© Ï∂îÏ†Å ÏãúÏûë:', diagnosisId);
    
    // SSE Ïó∞Í≤∞Î°ú Ïã§ÏãúÍ∞Ñ ÏßÑÌñâÏÉÅÌô© Ï∂îÏ†Å
    const eventSource = new EventSource(`/api/diagnosis-progress?diagnosisId=${encodeURIComponent(diagnosisId)}`);
    
    eventSource.onopen = () => {
      console.log('‚úÖ SSE Ïó∞Í≤∞ ÏÑ±Í≥µ - Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë:', diagnosisId);
      updateProgressSteps('data-validation', 'in-progress', 20);
    };

    eventSource.addEventListener('started', (event) => {
      const data = JSON.parse(event.data);
      console.log('üìä ÏßÑÌñâÏÉÅÌô© Ï∂îÏ†Å ÏãúÏûëÎê®:', data);
      setProgressData(data);
      updateProgressSteps('data-validation', 'in-progress', 30);
    });

    eventSource.addEventListener('progress', (event) => {
      const data = JSON.parse(event.data);
      console.log('üìà Ïã§Ï†ú ÏßÑÌñâÏÉÅÌô© ÏóÖÎç∞Ïù¥Ìä∏:', data);
      setProgressData(data);
      
      // Ïã§Ï†ú Google Sheets Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò ÏßÑÌñâÏÉÅÌô© Î∞òÏòÅ
      if (data.snapshot && data.snapshot.steps) {
        const steps = data.snapshot.steps;
        Object.keys(steps).forEach(stepKey => {
          const step = steps[stepKey];
          updateProgressSteps(stepKey, step.status, step.progress);
        });
      } else {
        // Ìè¥Î∞±: Í≤ΩÍ≥º ÏãúÍ∞Ñ Í∏∞Î∞ò Ï∂îÏ†ï
        const elapsedMs = data.elapsedMs || 0;
        const elapsedMinutes = Math.floor(elapsedMs / 60000);
        
        if (elapsedMinutes < 2) {
          updateProgressSteps('data-validation', 'completed', 100);
          updateProgressSteps('gemini-analysis', 'in-progress', Math.min(80, 20 + elapsedMinutes * 30));
        } else if (elapsedMinutes < 5) {
          updateProgressSteps('data-validation', 'completed', 100);
          updateProgressSteps('gemini-analysis', 'completed', 100);
          updateProgressSteps('swot-analysis', 'in-progress', Math.min(80, (elapsedMinutes - 2) * 25));
        } else if (elapsedMinutes < 8) {
          updateProgressSteps('data-validation', 'completed', 100);
          updateProgressSteps('gemini-analysis', 'completed', 100);
          updateProgressSteps('swot-analysis', 'completed', 100);
          updateProgressSteps('report-generation', 'in-progress', Math.min(80, (elapsedMinutes - 5) * 25));
        } else {
          updateProgressSteps('data-validation', 'completed', 100);
          updateProgressSteps('gemini-analysis', 'completed', 100);
          updateProgressSteps('swot-analysis', 'completed', 100);
          updateProgressSteps('report-generation', 'in-progress', 90);
          updateProgressSteps('email-sending', 'in-progress', Math.min(80, (elapsedMinutes - 8) * 20));
        }
      }
    });

    eventSource.addEventListener('done', (event) => {
      const data = JSON.parse(event.data);
      console.log('üéâ Ïã§Ï†ú ÏßÑÌñâÏÉÅÌô© ÏôÑÎ£å:', data);
      setProgressData(data);
      
      // Î™®Îì† Îã®Í≥Ñ ÏôÑÎ£å
      updateProgressSteps('data-validation', 'completed', 100);
      updateProgressSteps('gemini-analysis', 'completed', 100);
      updateProgressSteps('swot-analysis', 'completed', 100);
      updateProgressSteps('report-generation', 'completed', 100);
      updateProgressSteps('email-sending', 'completed', 100);
      
      setTimeout(() => {
        setPersistentNoticeOpen(false);
        toast({
          title: "üéâ ÏßÑÎã® ÏôÑÎ£å!",
          description: "Îß•ÌÇ®ÏßÄ Ïä§ÌÉÄÏùº Î≥¥Í≥†ÏÑúÍ∞Ä Ïù¥Î©îÏùºÎ°ú Î∞úÏÜ°ÎêòÏóàÏäµÎãàÎã§.",
          variant: "default"
        });
      }, 2000);
      
      eventSource.close();
    });

    eventSource.addEventListener('timeout', (event) => {
      const data = JSON.parse(event.data);
      console.log('‚è∞ ÏßÑÌñâÏÉÅÌô© Ï∂îÏ†Å ÌÉÄÏûÑÏïÑÏõÉ:', data);
      
      // ÌÉÄÏûÑÏïÑÏõÉ ÏãúÏóêÎèÑ ÏôÑÎ£å Ï≤òÎ¶¨ (Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Í≥ÑÏÜç ÏßÑÌñâ)
      updateProgressSteps('data-validation', 'completed', 100);
      updateProgressSteps('gemini-analysis', 'completed', 100);
      updateProgressSteps('swot-analysis', 'completed', 100);
      updateProgressSteps('report-generation', 'completed', 100);
      updateProgressSteps('email-sending', 'completed', 100);
      
      setTimeout(() => {
        setPersistentNoticeOpen(false);
        toast({
          title: "‚è∞ Ï≤òÎ¶¨ ÏãúÍ∞Ñ Ï¥àÍ≥º",
          description: "Í≥†ÌíàÏßà Î∂ÑÏÑùÏúºÎ°ú Ïù∏Ìï¥ ÏãúÍ∞ÑÏù¥ ÏÜåÏöîÎêòÍ≥† ÏûàÏäµÎãàÎã§. Ïù¥Î©îÏùºÎ°ú Í≤∞Í≥ºÎ•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.",
          variant: "default"
        });
      }, 2000);
      
      eventSource.close();
    });

    eventSource.onerror = (error) => {
      console.error('‚ùå SSE Ïó∞Í≤∞ Ïò§Î•ò:', error);
      
      // Ïó∞Í≤∞ Ïò§Î•ò Ïãú Ìè¥Î∞± Ï≤òÎ¶¨
      setTimeout(() => {
        setPersistentNoticeOpen(false);
        toast({
          title: "üì° Ïó∞Í≤∞ Ïò§Î•ò",
          description: "ÏßÑÌñâÏÉÅÌô© Ï∂îÏ†Å Ï§ë Ïó∞Í≤∞ Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Î≥¥Í≥†ÏÑúÎäî Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Í≥ÑÏÜç ÏÉùÏÑ±ÎêòÏñ¥ Ïù¥Î©îÏùºÎ°ú Î∞úÏÜ°Îê©ÎãàÎã§.",
          variant: "default"
        });
      }, 2000);
      
      eventSource.close();
    };

    // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ï†ïÎ¶¨
    return () => {
      eventSource.close();
    };
  };

  // ÏßÑÌñâ Îã®Í≥Ñ ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
  const updateProgressSteps = (stepKey: string, status: string, progress: number) => {
    setProgressSteps(prev => ({
      ...prev,
      [stepKey]: {
        ...prev[stepKey as keyof typeof prev],
        status,
        progress
      }
    }));
  };

  // ÎØ∏ÎãµÎ≥Ä Î¨∏Ìï≠ ÏûêÎèôÌôî ÏãúÏä§ÌÖú
  const goToNextUnansweredQuestion = () => {
    const unansweredQuestions = REAL_45_QUESTIONS
      .map((_, index) => index + 1)
      .filter(questionId => !formState.answers[questionId]);
    
    if (unansweredQuestions.length > 0) {
      const nextUnanswered = unansweredQuestions[0];
      setFormState(prev => ({ ...prev, currentQuestion: nextUnanswered - 1 }));
      
      // ÏïåÎ¶º ÌëúÏãú
      toast({
        title: `üìù ${unansweredQuestions.length}Í∞ú ÎØ∏ÎãµÎ≥Ä Î¨∏Ìï≠`,
        description: `${nextUnanswered}Î≤à Î¨∏Ìï≠ÏúºÎ°ú Ïù¥ÎèôÌñàÏäµÎãàÎã§. ÎãµÎ≥Ä ÌõÑ ÏûêÎèôÏúºÎ°ú Îã§Ïùå ÎØ∏ÎãµÎ≥Ä Î¨∏Ìï≠ÏúºÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.`,
        variant: "default"
      });
    } else {
      // Î™®Îì† Î¨∏Ìï≠ ÏôÑÎ£åÏãú ÏûêÎèô Ï†úÏ∂ú
      toast({
        title: "üéâ Î™®Îì† Î¨∏Ìï≠ ÏôÑÎ£å!",
        description: "ÏûêÎèôÏúºÎ°ú ÏßÑÎã® Ï†úÏ∂ú ÌôîÎ©¥ÏúºÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.",
        variant: "default"
      });
      
      setTimeout(() => {
        setFormState(prev => ({ ...prev, currentQuestion: REAL_45_QUESTIONS.length }));
      }, 1500);
    }
  };

  // ÎãµÎ≥Ä ÏôÑÎ£å ÌõÑ ÏûêÎèô Ïù¥Îèô Ï≤òÎ¶¨
  const handleAnswerWithAutoMove = (questionId: number, score: number) => {
    // Í∏∞Î≥∏ ÎãµÎ≥Ä Ï≤òÎ¶¨
    handleAnswer(questionId, score);
    
    // 0.5Ï¥à ÌõÑ Îã§Ïùå ÎØ∏ÎãµÎ≥Ä Î¨∏Ìï≠ÏúºÎ°ú ÏûêÎèô Ïù¥Îèô
    setTimeout(() => {
      const unansweredQuestions = REAL_45_QUESTIONS
        .map((_, index) => index + 1)
        .filter(qId => qId !== questionId && !formState.answers[qId]);
      
      if (unansweredQuestions.length > 0) {
        const nextUnanswered = unansweredQuestions[0];
        setFormState(prev => ({ ...prev, currentQuestion: nextUnanswered - 1 }));
        
        toast({
          title: `‚úÖ ${questionId}Î≤à ÏôÑÎ£å`,
          description: `${unansweredQuestions.length}Í∞ú ÎÇ®Ïùå. ${nextUnanswered}Î≤àÏúºÎ°ú ÏûêÎèô Ïù¥Îèô`,
          variant: "default"
        });
      } else {
        // Î™®Îì† Î¨∏Ìï≠ ÏôÑÎ£å
        toast({
          title: "üéâ Î™®Îì† Î¨∏Ìï≠ ÏôÑÎ£å!",
          description: "ÏßÑÎã® Ï†úÏ∂ú ÌôîÎ©¥ÏúºÎ°ú ÏûêÎèô Ïù¥ÎèôÌï©ÎãàÎã§.",
          variant: "default"
        });
        
        setTimeout(() => {
          setFormState(prev => ({ ...prev, currentQuestion: REAL_45_QUESTIONS.length }));
        }, 1000);
      }
    }, 500);
  };

  // Í∏∞ÏóÖÏ†ïÎ≥¥ ÏûÖÎ†• ÏôÑÎ£å (Í∞ÑÏÜåÌôî)
  const handleCompanyInfoSubmit = () => {
    const { 
      companyName, 
      contactName, 
      contactEmail, 
      contactPhone,
      industry, 
      employeeCount, 
      location,
      industryCustom
    } = formState.companyInfo;
    
    if (!companyName || !contactName || !contactEmail || !contactPhone || !industry || !employeeCount || !location.trim()) {
      toast({
        title: "ÌïÑÏàò Ï†ïÎ≥¥ ÎàÑÎùΩ",
        description: "ÌïÑÏàò Ìï≠Î™©ÏùÑ Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.",
        variant: "destructive"
      });
      return;
    }

    // ÏßÅÏ†ëÏûÖÎ†• ÏÑ†ÌÉùÏãú ÎÇ¥Ïö© ÌôïÏù∏
    if (industry === 'ÏßÅÏ†ëÏûÖÎ†•' && !industryCustom?.trim()) {
      toast({
        title: "ÏóÖÏ¢Ö ÏßÅÏ†ëÏûÖÎ†• ÌïÑÏöî",
        description: "ÏóÖÏ¢ÖÏùÑ ÏßÅÏ†ë ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.",
        variant: "destructive"
      });
      return;
    }
    
    setShowCompanyForm(false);
    setFormState(prev => ({ ...prev, currentQuestion: 0 }));
  };

  // ÎãµÎ≥Ä Ï†ÄÏû• (ÏûêÎèô ÏßÑÌñâ Ìè¨Ìï®) - React Ïò§Î•ò #418, #423 ÏàòÏ†ï
  const handleAnswer = (questionId: number, score: number) => {
    setFormState(prev => ({
      ...prev,
      answers: {
        ...prev.answers,
        [questionId]: score
      }
    }));

    // Ï†êÏàò ÏÑ†ÌÉù Ïãú ÌÜ†Ïä§Ìä∏ ÏïåÎ¶ºÏúºÎ°ú Ï¶âÏãú ÌîºÎìúÎ∞±
    const scoreLabels = {
      5: "Îß§Ïö∞ Ïö∞Ïàò (5Ï†ê)",
      4: "Ïö∞Ïàò (4Ï†ê)", 
      3: "Î≥¥ÌÜµ (3Ï†ê)",
      2: "Í∞úÏÑ† ÌïÑÏöî (2Ï†ê)",
      1: "Îß§Ïö∞ Î∂ÄÏ°± (1Ï†ê)"
    };
    
    toast({
      title: `‚úÖ ${scoreLabels[score as keyof typeof scoreLabels]} ÏÑ†ÌÉùÎê®`,
      description: `ÏßàÎ¨∏ ${questionId}Î≤àÏóê ${score}Ï†êÏùÑ Î∂ÄÏó¨ÌñàÏäµÎãàÎã§.`,
      duration: 2000,
    });

    // React.startTransitionÏúºÎ°ú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏïàÏ†ÑÌïòÍ≤å Ï≤òÎ¶¨
    const timer = setTimeout(() => {
      React.startTransition(() => {
        if (formState.currentQuestion < REAL_45_QUESTIONS.length - 1) {
          setFormState(prev => ({
            ...prev,
            currentQuestion: prev.currentQuestion + 1
          }));
        }
      });
    }, 1200); // ÌîºÎìúÎ∞±ÏùÑ ÌôïÏù∏Ìï† ÏãúÍ∞ÑÏùÑ Ï°∞Í∏à Îçî Ï§å

    // ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨Î•º ÏúÑÌï¥ refÎÇò stateÏóê Ï†ÄÏû•Ìï† ÏàòÎèÑ ÏûàÏßÄÎßå, 
    // Ïó¨Í∏∞ÏÑúÎäî Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä Ïñ∏ÎßàÏö¥Ìä∏Îê† Îïå ÏûêÎèôÏúºÎ°ú Ï†ïÎ¶¨Îê©ÎãàÎã§.
    return () => clearTimeout(timer);
  };

  // Îã§Ïùå ÏßàÎ¨∏ - React Ïò§Î•ò #418, #423 ÏàòÏ†ï
  const handleNext = () => {
    React.startTransition(() => {
      if (formState.currentQuestion < REAL_45_QUESTIONS.length - 1) {
        setFormState(prev => ({
          ...prev,
          currentQuestion: prev.currentQuestion + 1
        }));
      }
    });
  };

  // Ïù¥Ï†Ñ ÏßàÎ¨∏ - React Ïò§Î•ò #418, #423 ÏàòÏ†ï
  const handlePrev = () => {
    React.startTransition(() => {
      if (formState.currentQuestion > 0) {
        setFormState(prev => ({
          ...prev,
          currentQuestion: prev.currentQuestion - 1
        }));
      }
    });
  };

  // ÏßÑÎã® ÏôÑÎ£å Î∞è Ï†úÏ∂ú
  const handleSubmit = async () => {
    if (answeredCount < REAL_45_QUESTIONS.length) {
      toast({
        title: "ÎãµÎ≥Ä ÎØ∏ÏôÑÎ£å",
        description: `${REAL_45_QUESTIONS.length - answeredCount}Í∞ú Î¨∏Ìï≠Ïù¥ ÎÇ®ÏïòÏäµÎãàÎã§.`,
        variant: "destructive"
      });
      return;
    }

    setIsSubmitting(true);
    setPersistentNoticeOpen(true);
    try {
      // API Ìò∏Ï∂ú Î°úÏßÅ - Ïã§Ï†ú Ïã†Ï≤≠ÏÑú Îç∞Ïù¥ÌÑ∞ Ïó∞Í≥Ñ ÏàòÏ†ï
      const response = await fetch('/api/ai-diagnosis', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          // Í∏∞ÏóÖ Ï†ïÎ≥¥
          companyName: formState.companyInfo.companyName,
          contactName: formState.companyInfo.contactName,
          contactEmail: formState.companyInfo.contactEmail,
          contactPhone: formState.companyInfo.contactPhone,
          industry: formState.companyInfo.industry === 'ÏßÅÏ†ëÏûÖÎ†•' ? formState.companyInfo.industryCustom : formState.companyInfo.industry,
          customIndustry: formState.companyInfo.industryCustom,
          employeeCount: formState.companyInfo.employeeCount,
          annualRevenue: formState.companyInfo.annualRevenue,
          location: formState.companyInfo.location,
          
          // Ïã§Ï†ú Ïã†Ï≤≠ÏÑú ÏùëÎãµ Îç∞Ïù¥ÌÑ∞ - Í∞ùÏ≤¥ ÌòïÌÉúÎ°ú Ï†ÑÏÜ°
          assessmentResponses: formState.answers, // ‚úÖ Í∞ùÏ≤¥ ÌòïÌÉúÎ°ú Ï†ÑÏÜ°
          
          // Ï∂îÍ∞Ä Î©îÌÉÄÎç∞Ïù¥ÌÑ∞
          diagnosisType: 'real-45-questions',
          questionCount: REAL_45_QUESTIONS.length,
          businessContent: '', // Í∏∞Î≥∏Í∞í
          challenges: '', // Í∏∞Î≥∏Í∞í
        }),
      });

      if (!response.ok) {
        throw new Error('ÏßÑÎã® Ï†úÏ∂úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }

      const result = await response.json();
      
      if (result.success) {
        // ÏßÑÎã® Í≤∞Í≥ºÎ•º ÏÉÅÌÉúÏóê Ï†ÄÏû•ÌïòÏó¨ ÏôÑÎ£å ÌôîÎ©¥ÏúºÎ°ú Ï†ÑÌôò
        const diagnosisId = result.diagnosisId || result.data?.diagnosisId || `TEMP-${Date.now()}`;
        const enhancedResult = {
          ...result,
          diagnosisId: diagnosisId
        };
        
        setDiagnosisResult(enhancedResult);
        
        // ÏÑ∏ÏÖò Ïä§ÌÜ†Î¶¨ÏßÄÏóê Í≤∞Í≥º Ï†ÄÏû• (ÌéòÏù¥ÏßÄ ÏÉàÎ°úÍ≥†Ïπ® ÎåÄÎπÑ)
        try {
          sessionStorage.setItem('diagnosisResult', JSON.stringify(enhancedResult));
        } catch (storageError) {
          console.warn('ÏÑ∏ÏÖò Ï†ÄÏû• Ïã§Ìå®:', storageError);
        }
        
        // Ïã§Ï†ú ÏßÑÌñâÏÉÅÌô© Ï∂îÏ†Å ÏãúÏûë
        startProgressTracking(diagnosisId);
        
        toast({
          title: "ÏßÑÎã® Ï†úÏ∂ú ÏôÑÎ£å!",
          description: "AI Î∂ÑÏÑùÏùÑ ÏãúÏûëÌï©ÎãàÎã§. Ïã§ÏãúÍ∞Ñ ÏßÑÌñâÏÉÅÌô©ÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî.",
          variant: "default"
        });

        // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ Ï†ïÎ¶¨
        localStorage.removeItem('real45QuestionForm');
        
        setFormState(prev => ({ ...prev, isCompleted: true }));
      } else {
        throw new Error(result.error || 'ÏßÑÎã® Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      }
      
    } catch (error: any) {
      console.error('ÏßÑÎã® Ï†úÏ∂ú Ïò§Î•ò:', error);
      
      // Ïò§Î•ò Ïú†ÌòïÏóê Îî∞Î•∏ ÏÉÅÏÑ∏ Î©îÏãúÏßÄ Ï†úÍ≥µ
      let errorMessage = "ÏßÑÎã® Ï†úÏ∂ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.";
      let errorDescription = "Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.";
      
      if (error.message?.includes('500')) {
        errorMessage = "ÏÑúÎ≤Ñ Ï≤òÎ¶¨ Ïò§Î•ò";
        errorDescription = "AI Î∂ÑÏÑù Ï§ë ÏùºÏãúÏ†Å Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.";
      } else if (error.message?.includes('timeout') || error.message?.includes('Timeout')) {
        errorMessage = "Ï≤òÎ¶¨ ÏãúÍ∞Ñ Ï¥àÍ≥º";
        errorDescription = "Í≥†ÌíàÏßà AI Î∂ÑÏÑùÏúºÎ°ú Ïù∏Ìï¥ ÏãúÍ∞ÑÏù¥ ÏÜåÏöîÎêòÍ≥† ÏûàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.";
      } else if (error.message?.includes('network') || error.message?.includes('fetch')) {
        errorMessage = "ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ Ïò§Î•ò";
        errorDescription = "Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏ÌïòÍ≥† Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.";
      }
      
      toast({
        title: errorMessage,
        description: errorDescription,
        variant: "destructive"
      });
      
      // Ïò§Î•ò Î≥¥Í≥† (ÏÑ†ÌÉùÏÇ¨Ìï≠)
      if (typeof window !== 'undefined') {
        try {
          fetch('/api/error-shield', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              type: 'diagnosis-submission-error',
              error: error.message,
              timestamp: new Date().toISOString(),
              userAgent: navigator.userAgent,
              url: window.location.href
            })
          }).catch(() => {}); // Ïò§Î•ò Î≥¥Í≥† Ïã§Ìå®Îäî Î¨¥Ïãú
        } catch {}
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  // ÏßÑÎã® ÏôÑÎ£å ÌôîÎ©¥
  if (diagnosisResult) {
    return <>
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center p-8 bg-white rounded-2xl shadow-xl max-w-md">
          <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-900 mb-2">ÏßÑÎã® ÏôÑÎ£å!</h2>
          <p className="text-gray-600 mb-4">Îß•ÌÇ®ÏßÄ Ïä§ÌÉÄÏùº Î≥¥Í≥†ÏÑúÍ∞Ä Ïù¥Î©îÏùºÎ°ú Î∞úÏÜ°Îê©ÎãàÎã§.</p>
          <p className="text-sm text-gray-500">ÏßÑÎã® ID: {diagnosisResult.diagnosisId}</p>
        </div>
      </div>
      {persistentNoticeOpen && (
        <div className="fixed inset-0 z-[1000] flex items-end sm:items-center justify-center bg-black/40 p-4">
          <div className="w-full max-w-lg rounded-2xl shadow-2xl bg-white overflow-hidden">
            <div className="bg-gradient-to-r from-indigo-600 to-blue-600 text-white p-4">
              <div className="flex items-center gap-2">
                <Loader2 className="w-5 h-5 animate-spin" />
                <span className="font-semibold">AI Ïó≠ÎüâÏßÑÎã® Î≥¥Í≥†ÏÑú ÏÉùÏÑ± Ï§ë</span>
              </div>
              <p className="text-white/80 text-sm mt-1">Ïã§ÏãúÍ∞Ñ ÏßÑÌñâÏÉÅÌô©ÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî</p>
            </div>
            
            <div className="p-4 space-y-4">
              {/* Ï†ÑÏ≤¥ ÏßÑÌñâÎ•† */}
              <div className="space-y-2">
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium text-gray-700">Ï†ÑÏ≤¥ ÏßÑÌñâÎ•†</span>
                  <span className="text-sm text-gray-500">
                    {Math.round(Object.values(progressSteps).reduce((acc, step) => acc + step.progress, 0) / 5)}%
                  </span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className="bg-gradient-to-r from-blue-500 to-green-500 h-2 rounded-full transition-all duration-500"
                    style={{
                      width: `${Math.round(Object.values(progressSteps).reduce((acc, step) => acc + step.progress, 0) / 5)}%`
                    }}
                  />
                </div>
              </div>

              {/* Îã®Í≥ÑÎ≥Ñ ÏßÑÌñâÏÉÅÌô© */}
              <div className="space-y-3">
                {Object.entries(progressSteps).map(([key, step]) => (
                  <div key={key} className="flex items-center gap-3">
                    <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold transition-all duration-300 ${
                      step.status === 'completed' ? 'bg-green-500 text-white' :
                      step.status === 'in-progress' ? 'bg-blue-500 text-white animate-pulse' :
                      'bg-gray-200 text-gray-500'
                    }`}>
                      {step.status === 'completed' ? '‚úì' : 
                       step.status === 'in-progress' ? '‚ö°' : '‚óã'}
                    </div>
                    
                    <div className="flex-1">
                      <div className="flex justify-between items-center mb-1">
                        <span className={`text-sm font-medium ${
                          step.status === 'completed' ? 'text-green-700' :
                          step.status === 'in-progress' ? 'text-blue-700' :
                          'text-gray-500'
                        }`}>
                          {step.label}
                        </span>
                        <span className="text-xs text-gray-500">{step.progress}%</span>
                      </div>
                      
                      <div className="w-full bg-gray-200 rounded-full h-1.5">
                        <div 
                          className={`h-1.5 rounded-full transition-all duration-500 ${
                            step.status === 'completed' ? 'bg-green-500' :
                            step.status === 'in-progress' ? 'bg-blue-500' :
                            'bg-gray-300'
                          }`}
                          style={{ width: `${step.progress}%` }}
                        />
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {/* ÏòàÏÉÅ ÏãúÍ∞Ñ Î∞è ÏïàÎÇ¥ */}
              <div className="rounded-lg border bg-blue-50 border-blue-200 p-3">
                <p className="text-blue-900 font-medium text-sm">üìä Í≥†ÌíàÏßà AI Î∂ÑÏÑù ÏßÑÌñâ Ï§ë</p>
                <p className="text-blue-800/80 text-xs mt-1">
                  GEMINI 2.5 FlashÍ∞Ä 45Í∞ú Ìï≠Î™©ÏùÑ Ï¢ÖÌï© Î∂ÑÏÑùÌïòÏó¨ Îß•ÌÇ®ÏßÄ Ïä§ÌÉÄÏùº Î≥¥Í≥†ÏÑúÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
                </p>
                <p className="text-blue-700 text-xs mt-2 font-medium">
                  ÏòàÏÉÅ ÏôÑÎ£å ÏãúÍ∞Ñ: 5~15Î∂Ñ | ÏôÑÎ£å Ïãú ÏûêÎèôÏúºÎ°ú Ïù¥Î©îÏùº Î∞úÏÜ°Îê©ÎãàÎã§
                </p>
              </div>
              
              {progressData && (
                <div className="text-xs text-gray-500 text-center">
                  ÏßÑÎã® ID: {progressData.diagnosisId || diagnosisResult?.diagnosisId}
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </>;
  }

  // HydrationÏù¥ ÏôÑÎ£åÎêòÏßÄ ÏïäÏïòÏúºÎ©¥ Î°úÎî© ÌëúÏãú
  if (!isHydrated) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">AI Ïó≠ÎüâÏßÑÎã®ÏùÑ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§...</p>
          <p className="text-xs text-gray-400 mt-2">Hydration: {isHydrated ? 'ÏôÑÎ£å' : 'ÎåÄÍ∏∞Ï§ë'}</p>
        </div>
      </div>
    );
  }

  // Í∏∞ÏóÖ Ï†ïÎ≥¥ ÏûÖÎ†• Ìèº
  if (showCompanyForm) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8">
        <div className="max-w-4xl mx-auto px-4">
          <Card className="shadow-xl">
            <CardHeader className="text-center">
              <div className="flex items-center justify-center mb-6">
                <Image 
                  src="/aicamp_leader.png" 
                  alt="Ïù¥ÍµêÏû•" 
                  width={80}
                  height={80}
                  className="w-20 h-20 rounded-full mr-4 shadow-lg"
                />
                <div className="text-center">
                  <CardTitle className="text-3xl font-bold text-blue-900 mb-2">
                    AI Ïó≠ÎüâÏßÑÎã® Ïã†Ï≤≠ÏÑú
                  </CardTitle>
                  <p className="text-lg font-semibold text-blue-600">45Í∞ú ÌñâÎèôÏßÄÌëú Í∏∞Î∞ò ÎßûÏ∂§Ìòï Î∂ÑÏÑù</p>
                </div>
              </div>
              <div className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-r-lg mb-6">
                <div className="flex items-start">
                  <div className="flex-shrink-0">
                    <svg className="h-5 w-5 text-blue-400" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <p className="text-sm text-blue-700 font-medium">
                      üìã Ïã†Ï≤≠ÏÑú ÏûëÏÑ± ÏïàÎÇ¥
                    </p>
                    <p className="text-sm text-blue-600 mt-1">
                      Ï†ïÌôïÌïú ÏßÑÎã®ÏùÑ ÏúÑÌï¥ Î™®Îì† ÌïÑÏàò Ìï≠Î™©ÏùÑ Îπ†ÏßêÏóÜÏù¥ ÏûëÏÑ±Ìï¥ Ï£ºÏÑ∏Ïöî. 
                      ÏûëÏÑ±ÌïòÏã† Ï†ïÎ≥¥Îäî ÎßûÏ∂§Ìòï AI Ïó≠Îüâ Î∂ÑÏÑùÏóêÎßå ÏÇ¨Ïö©Îê©ÎãàÎã§.
                    </p>
                  </div>
                </div>
              </div>
            </CardHeader>
            
            <CardContent className="space-y-6">
              <div className="grid md:grid-cols-2 gap-8">
                <div className="space-y-6">
                  {/* ÌöåÏÇ¨Î™Ö ÏûÖÎ†• */}
                  <div className="space-y-3">
                    <label className="flex items-center text-sm font-semibold text-gray-700">
                      <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-md text-xs font-bold mr-2">ÌïÑÏàò</span>
                      ÌöåÏÇ¨Î™Ö
                    </label>
                    <input
                      type="text"
                      value={formState.companyInfo.companyName}
                      onChange={(e) => setFormState(prev => ({
                        ...prev,
                        companyInfo: { ...prev.companyInfo, companyName: e.target.value }
                      }))}
                      className="w-full p-4 border-2 border-gray-200 rounded-xl text-lg h-[56px] 
                                transition-all duration-300 ease-in-out
                                focus:border-blue-500 focus:ring-4 focus:ring-blue-100 focus:outline-none
                                hover:border-gray-300 hover:shadow-sm
                                placeholder:text-gray-400"
                      placeholder="ÌöåÏÇ¨Î™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                    />
                  </div>

                  {/* Îã¥ÎãπÏûêÎ™Ö ÏûÖÎ†• */}
                  <div className="space-y-3">
                    <label className="flex items-center text-sm font-semibold text-gray-700">
                      <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-md text-xs font-bold mr-2">ÌïÑÏàò</span>
                      Îã¥ÎãπÏûêÎ™Ö
                    </label>
                    <input
                      type="text"
                      value={formState.companyInfo.contactName}
                      onChange={(e) => setFormState(prev => ({
                        ...prev,
                        companyInfo: { ...prev.companyInfo, contactName: e.target.value }
                      }))}
                      className="w-full p-4 border-2 border-gray-200 rounded-xl text-lg h-[56px] 
                                transition-all duration-300 ease-in-out
                                focus:border-blue-500 focus:ring-4 focus:ring-blue-100 focus:outline-none
                                hover:border-gray-300 hover:shadow-sm
                                placeholder:text-gray-400"
                      placeholder="Îã¥ÎãπÏûêÎ™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                    />
                  </div>

                  {/* Ïù¥Î©îÏùº ÏûÖÎ†• */}
                  <div className="space-y-3">
                    <label className="flex items-center text-sm font-semibold text-gray-700">
                      <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-md text-xs font-bold mr-2">ÌïÑÏàò</span>
                      Ïù¥Î©îÏùº Ï£ºÏÜå
                    </label>
                    <EmailInput
                      value={formState.companyInfo.contactEmail}
                      onChange={handleEmailChange}
                      label=""
                      required={true}
                      placeholder="example@company.com"
                      showEmailNotice={true}
                      className="w-full"
                    />
                  </div>

                  {/* Ï†ÑÌôîÎ≤àÌò∏ ÏûÖÎ†• */}
                  <div className="space-y-3">
                    <label className="flex items-center text-sm font-semibold text-gray-700">
                      <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-md text-xs font-bold mr-2">ÌïÑÏàò</span>
                      Ï†ÑÌôîÎ≤àÌò∏
                    </label>
                    <PhoneInput
                      value={formState.companyInfo.contactPhone}
                      onChange={handlePhoneChange}
                      label=""
                      required={true}
                      placeholder="010-0000-0000"
                      className="w-full"
                    />
                  </div>
                </div>

                <div className="space-y-6">
                  <div className="space-y-3">
                    <label className="flex items-center text-sm font-semibold text-gray-700">
                      <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-md text-xs font-bold mr-2">ÌïÑÏàò</span>
                      ÏóÖÏ¢Ö
                    </label>
                    <select
                      value={formState.companyInfo.industry}
                      onChange={(e) => setFormState(prev => ({
                        ...prev,
                        companyInfo: { ...prev.companyInfo, industry: e.target.value }
                      }))}
                      className="w-full p-4 border-2 border-gray-200 rounded-xl text-lg h-[56px] 
                                transition-all duration-300 ease-in-out
                                focus:border-blue-500 focus:ring-4 focus:ring-blue-100 focus:outline-none
                                hover:border-gray-300 hover:shadow-sm"
                      aria-label="ÏóÖÏ¢Ö ÏÑ†ÌÉù"
                    >
                      <option value="">ÏóÖÏ¢ÖÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                      <option value="Ï†úÏ°∞ÏóÖ">Ï†úÏ°∞ÏóÖ</option>
                      <option value="ÏÑúÎπÑÏä§ÏóÖ">ÏÑúÎπÑÏä§ÏóÖ</option>
                      <option value="Ïú†ÌÜµÏóÖ">Ïú†ÌÜµÏóÖ</option>
                      <option value="IT/ÏÜåÌîÑÌä∏Ïõ®Ïñ¥">IT/ÏÜåÌîÑÌä∏Ïõ®Ïñ¥</option>
                      <option value="Í∏àÏúµÏóÖ">Í∏àÏúµÏóÖ</option>
                      <option value="Í±¥ÏÑ§ÏóÖ">Í±¥ÏÑ§ÏóÖ</option>
                      <option value="ÍµêÏú°ÏóÖ">ÍµêÏú°ÏóÖ</option>
                      <option value="ÏùòÎ£åÏóÖ">ÏùòÎ£åÏóÖ</option>
                      <option value="Ïö¥ÏÜ°ÏóÖ">Ïö¥ÏÜ°ÏóÖ</option>
                      <option value="ÎÜçÏóÖ">ÎÜçÏóÖ</option>
                      <option value="ÏßÅÏ†ëÏûÖÎ†•">ÏßÅÏ†ëÏûÖÎ†•</option>
                    </select>
                  </div>

                  {/* ÏóÖÏ¢Ö ÏßÅÏ†ëÏûÖÎ†• ÌïÑÎìú */}
                  {formState.companyInfo.industry === 'ÏßÅÏ†ëÏûÖÎ†•' && (
                    <div className="space-y-3">
                      <label className="flex items-center text-sm font-semibold text-gray-700">
                        <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-md text-xs font-bold mr-2">ÌïÑÏàò</span>
                        ÏóÖÏ¢Ö ÏßÅÏ†ëÏûÖÎ†•
                      </label>
                      <input
                        type="text"
                        value={formState.companyInfo.industryCustom || ''}
                        onChange={(e) => setFormState(prev => ({
                          ...prev,
                          companyInfo: { ...prev.companyInfo, industryCustom: e.target.value }
                        }))}
                        className="w-full p-4 border-2 border-gray-200 rounded-xl text-lg h-[56px] 
                                  transition-all duration-300 ease-in-out
                                  focus:border-blue-500 focus:ring-4 focus:ring-blue-100 focus:outline-none
                                  hover:border-gray-300 hover:shadow-sm
                                  placeholder:text-gray-400"
                        placeholder="ÏóÖÏ¢ÖÏùÑ ÏßÅÏ†ë ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                      />
                    </div>
                  )}

                  <div className="space-y-3">
                    <label className="flex items-center text-sm font-semibold text-gray-700">
                      <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-md text-xs font-bold mr-2">ÌïÑÏàò</span>
                      ÏßÅÏõêÏàò
                    </label>
                    <select
                      value={formState.companyInfo.employeeCount}
                      onChange={(e) => setFormState(prev => ({
                        ...prev,
                        companyInfo: { ...prev.companyInfo, employeeCount: e.target.value }
                      }))}
                      className="w-full p-4 border-2 border-gray-200 rounded-xl text-lg h-[56px] 
                                transition-all duration-300 ease-in-out
                                focus:border-blue-500 focus:ring-4 focus:ring-blue-100 focus:outline-none
                                hover:border-gray-300 hover:shadow-sm"
                      aria-label="ÏßÅÏõêÏàò ÏÑ†ÌÉù"
                    >
                      <option value="">ÏßÅÏõêÏàòÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                      <option value="1-10Î™Ö">1-10Î™Ö</option>
                      <option value="11-50Î™Ö">11-50Î™Ö</option>
                      <option value="51-100Î™Ö">51-100Î™Ö</option>
                      <option value="101-300Î™Ö">101-300Î™Ö</option>
                      <option value="300Î™Ö Ïù¥ÏÉÅ">300Î™Ö Ïù¥ÏÉÅ</option>
                    </select>
                  </div>

                  <div className="space-y-3">
                    <label className="flex items-center text-sm font-semibold text-gray-700">
                      <span className="bg-gray-100 text-gray-600 px-2 py-1 rounded-md text-xs font-bold mr-2">ÏÑ†ÌÉù</span>
                      Ïó∞Îß§Ï∂ú
                    </label>
                    <select
                      value={formState.companyInfo.annualRevenue}
                      onChange={(e) => setFormState(prev => ({
                        ...prev,
                        companyInfo: { ...prev.companyInfo, annualRevenue: e.target.value }
                      }))}
                      className="w-full p-4 border-2 border-gray-200 rounded-xl text-lg h-[56px] 
                                transition-all duration-300 ease-in-out
                                focus:border-blue-500 focus:ring-4 focus:ring-blue-100 focus:outline-none
                                hover:border-gray-300 hover:shadow-sm"
                      aria-label="Ïó∞Îß§Ï∂ú ÏÑ†ÌÉù"
                    >
                      <option value="">Ïó∞Îß§Ï∂úÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                      <option value="10ÏñµÏõê ÎØ∏Îßå">10ÏñµÏõê ÎØ∏Îßå</option>
                      <option value="10Ïñµ~20ÏñµÏõê ÎØ∏Îßå">10Ïñµ~20ÏñµÏõê ÎØ∏Îßå</option>
                      <option value="20Ïñµ~50ÏñµÏõê ÎØ∏Îßå">20Ïñµ~50ÏñµÏõê ÎØ∏Îßå</option>
                      <option value="50Ïñµ~100ÏñµÏõê ÎØ∏Îßå">50Ïñµ~100ÏñµÏõê ÎØ∏Îßå</option>
                      <option value="100Ïñµ~300ÏñµÏõê ÎØ∏Îßå">100Ïñµ~300ÏñµÏõê ÎØ∏Îßå</option>
                      <option value="300Ïñµ~500ÏñµÏõê ÎØ∏Îßå">300Ïñµ~500ÏñµÏõê ÎØ∏Îßå</option>
                      <option value="500Ïñµ~1000ÏñµÏõê ÎØ∏Îßå">500Ïñµ~1000ÏñµÏõê ÎØ∏Îßå</option>
                      <option value="1000ÏñµÏõê Ïù¥ÏÉÅ">1000ÏñµÏõê Ïù¥ÏÉÅ</option>
                    </select>
                  </div>

                  <div className="space-y-3">
                    <label className="flex items-center text-sm font-semibold text-gray-700">
                      <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-md text-xs font-bold mr-2">ÌïÑÏàò</span>
                      ÏÜåÏû¨ÏßÄ (ÎèÑ/ÌäπÎ≥ÑÏãú/Ïãú)
                    </label>
                    <select
                      value={formState.companyInfo.location}
                      onChange={(e) => setFormState(prev => ({
                        ...prev,
                        companyInfo: { ...prev.companyInfo, location: e.target.value }
                      }))}
                      className="w-full p-4 border-2 border-gray-200 rounded-xl text-lg h-[56px] 
                                transition-all duration-300 ease-in-out
                                focus:border-blue-500 focus:ring-4 focus:ring-blue-100 focus:outline-none
                                hover:border-gray-300 hover:shadow-sm"
                      aria-label="ÏÜåÏû¨ÏßÄ ÏÑ†ÌÉù"
                    >
                      <option value="">ÏÜåÏû¨ÏßÄÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                      <option value="ÏÑúÏö∏ÌäπÎ≥ÑÏãú">ÏÑúÏö∏ÌäπÎ≥ÑÏãú</option>
                      <option value="Î∂ÄÏÇ∞Í¥ëÏó≠Ïãú">Î∂ÄÏÇ∞Í¥ëÏó≠Ïãú</option>
                      <option value="ÎåÄÍµ¨Í¥ëÏó≠Ïãú">ÎåÄÍµ¨Í¥ëÏó≠Ïãú</option>
                      <option value="Ïù∏Ï≤úÍ¥ëÏó≠Ïãú">Ïù∏Ï≤úÍ¥ëÏó≠Ïãú</option>
                      <option value="Í¥ëÏ£ºÍ¥ëÏó≠Ïãú">Í¥ëÏ£ºÍ¥ëÏó≠Ïãú</option>
                      <option value="ÎåÄÏ†ÑÍ¥ëÏó≠Ïãú">ÎåÄÏ†ÑÍ¥ëÏó≠Ïãú</option>
                      <option value="Ïö∏ÏÇ∞Í¥ëÏó≠Ïãú">Ïö∏ÏÇ∞Í¥ëÏó≠Ïãú</option>
                      <option value="ÏÑ∏Ï¢ÖÌäπÎ≥ÑÏûêÏπòÏãú">ÏÑ∏Ï¢ÖÌäπÎ≥ÑÏûêÏπòÏãú</option>
                      <option value="Í≤ΩÍ∏∞ÎèÑ">Í≤ΩÍ∏∞ÎèÑ</option>
                      <option value="Í∞ïÏõêÌäπÎ≥ÑÏûêÏπòÎèÑ">Í∞ïÏõêÌäπÎ≥ÑÏûêÏπòÎèÑ</option>
                      <option value="Ï∂©Ï≤≠Î∂ÅÎèÑ">Ï∂©Ï≤≠Î∂ÅÎèÑ</option>
                      <option value="Ï∂©Ï≤≠ÎÇ®ÎèÑ">Ï∂©Ï≤≠ÎÇ®ÎèÑ</option>
                      <option value="Ï†ÑÎùºÎ∂ÅÎèÑ">Ï†ÑÎùºÎ∂ÅÎèÑ</option>
                      <option value="Ï†ÑÎùºÎÇ®ÎèÑ">Ï†ÑÎùºÎÇ®ÎèÑ</option>
                      <option value="Í≤ΩÏÉÅÎ∂ÅÎèÑ">Í≤ΩÏÉÅÎ∂ÅÎèÑ</option>
                      <option value="Í≤ΩÏÉÅÎÇ®ÎèÑ">Í≤ΩÏÉÅÎÇ®ÎèÑ</option>
                      <option value="Ï†úÏ£ºÌäπÎ≥ÑÏûêÏπòÎèÑ">Ï†úÏ£ºÌäπÎ≥ÑÏûêÏπòÎèÑ</option>
                    </select>
                  </div>
                </div>
              </div>

              <div className="flex justify-center pt-6">
                <Button
                  onClick={handleCompanyInfoSubmit}
                  size="lg"
                  className="px-8 py-3 text-lg"
                >
                  ÏßÑÎã® ÏãúÏûëÌïòÍ∏∞ <ArrowRight className="ml-2 h-5 w-5" />
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  // ÏßàÎ¨∏ ÏßÑÌñâ ÌôîÎ©¥
  const currentQuestion = REAL_45_QUESTIONS[formState.currentQuestion];

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8">
      <div className="max-w-4xl mx-auto px-4">
        {/* ÏßÑÌñâÎ•† ÌëúÏãú */}
        <div className="mb-8">
          <div className="flex justify-between items-center mb-4">
            <div className="flex items-center">
              <Image 
                src="/aicamp_leader.png" 
                alt="Ïù¥ÍµêÏû•" 
                width={48}
                height={48}
                className="w-12 h-12 rounded-full mr-3 shadow-md"
              />
              <h1 className="text-2xl font-bold text-blue-900">Ïù¥ÍµêÏû•ÏùòAIÏó≠ÎüâÏßÑÎã®</h1>
            </div>
            <div className="flex items-center gap-3">
              <Badge variant="outline" className="text-lg px-3 py-1">
                {answeredCount}/{REAL_45_QUESTIONS.length}
              </Badge>
              {answeredCount > 0 && (
                <div className="bg-gradient-to-r from-blue-500 to-green-500 text-white px-3 py-1 rounded-full text-sm font-bold shadow-md">
                  <span className="mr-1">üéØ</span>
                  ÌòÑÏû¨ Ï†êÏàò: {Object.values(formState.answers).reduce((sum, score) => sum + score, 0)}Ï†ê
                </div>
              )}
            </div>
          </div>
          <Progress value={progress} className="h-3" />
          <div className="flex justify-between items-center mt-2">
            <div className="flex items-center gap-4">
              <p className="text-sm text-gray-600">
                ÏßÑÌñâÎ•†: {Math.round(progress)}%
              </p>
              {answeredCount < REAL_45_QUESTIONS.length && (
                <div className="flex items-center text-sm text-orange-600 bg-orange-50 px-2 py-1 rounded-full border border-orange-200">
                  <span className="mr-1">‚ö†Ô∏è</span>
                  <span className="font-medium">{REAL_45_QUESTIONS.length - answeredCount}Í∞ú ÎØ∏ÎãµÎ≥Ä</span>
                </div>
              )}
            </div>
            {answeredCount > 0 && (
              <p className="text-sm text-blue-600 font-medium">
                ÌèâÍ∑† Ï†êÏàò: {(Object.values(formState.answers).reduce((sum, score) => sum + score, 0) / answeredCount).toFixed(1)}Ï†ê
              </p>
            )}
          </div>
        </div>

        {/* ÏßàÎ¨∏ Ïπ¥Îìú */}
        <AnimatePresence mode="wait">
          <motion.div
            key={formState.currentQuestion}
            initial={{ opacity: 0, x: 50 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -50 }}
            transition={{ duration: 0.3 }}
          >
            <Card className="shadow-xl">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <Badge variant="secondary">
                    ÏßàÎ¨∏ {formState.currentQuestion + 1}
                  </Badge>
                  <Badge variant="outline" className={
                    currentQuestion?.category === 'businessFoundation' ? 'bg-blue-50 text-blue-700' :
                    currentQuestion?.category === 'currentAI' ? 'bg-green-50 text-green-700' :
                    currentQuestion?.category === 'organizationReadiness' ? 'bg-purple-50 text-purple-700' :
                    currentQuestion?.category === 'techInfrastructure' ? 'bg-indigo-50 text-indigo-700' :
                    currentQuestion?.category === 'goalClarity' ? 'bg-yellow-50 text-yellow-700' :
                    currentQuestion?.category === 'executionCapability' ? 'bg-red-50 text-red-700' :
                    'bg-gray-50 text-gray-700'
                  }>
                    {currentQuestion?.category || 'Ïïå Ïàò ÏóÜÏùå'}
                  </Badge>
                </div>
                <CardTitle className="text-xl leading-relaxed">
                  {currentQuestion?.question || 'ÏßàÎ¨∏ÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...'}
                </CardTitle>
              </CardHeader>

              <CardContent className="space-y-6">
                {/* Ï†êÏàò Ï≤¥Í≥Ñ ÏïàÎÇ¥ - Í≥†ÎèÑÌôîÎêú Î≤ÑÏ†Ñ */}
                <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-xl p-6 mb-6 shadow-sm">
                  <div className="flex items-center mb-4">
                    <div className="flex items-center bg-blue-100 px-3 py-1 rounded-full mr-3">
                      <span className="text-blue-600 font-bold text-sm">üìä</span>
                    </div>
                    <div>
                      <h4 className="text-blue-800 font-bold text-lg">Ï†êÏàòÏ≤¥Í≥Ñ ÏïàÎÇ¥ & ÌñâÎèôÏßÄÌëú ÌèâÍ∞Ä Í∞ÄÏù¥Îìú</h4>
                      <p className="text-blue-600 text-sm mt-1">Í∞Å Î¨∏Ìï≠Î≥Ñ Íµ¨Ï≤¥Ï†ÅÏù∏ ÌñâÎèôÏßÄÌëúÎ•º Í∏∞Ï§ÄÏúºÎ°ú Ï†ïÌôïÌïú ÏûêÍ∞ÄÌèâÍ∞ÄÎ•º ÏßÑÌñâÌïòÏÑ∏Ïöî</p>
                    </div>
                  </div>
                  
                  {/* Ï†êÏàò ÎßâÎåÄ Í∑∏ÎûòÌîÑ Ïä§ÌÉÄÏùº ÏïàÎÇ¥ */}
                  <div className="space-y-3">
                    <div className="flex items-center space-x-3">
                      <div className="w-12 h-6 bg-gradient-to-r from-green-400 to-green-600 rounded-full flex items-center justify-center">
                        <span className="text-white text-xs font-bold">5</span>
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center justify-between">
                          <span className="text-green-800 font-semibold text-sm">Îß§Ïö∞ Ïö∞Ïàò (5Ï†ê)</span>
                          <span className="text-green-600 text-xs bg-green-100 px-2 py-1 rounded-full">90-100% ÏàòÏ§Ä</span>
                        </div>
                        <p className="text-green-700 text-xs mt-1">Ìï¥Îãπ ÏòÅÏó≠ÏóêÏÑú ÏóÖÍ≥Ñ ÏµúÍ≥† ÏàòÏ§ÄÏùò Ïó≠ÎüâÏùÑ Î≥¥Ïú†ÌïòÍ≥† ÏûàÏùå</p>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-3">
                      <div className="w-12 h-6 bg-gradient-to-r from-blue-400 to-blue-600 rounded-full flex items-center justify-center">
                        <span className="text-white text-xs font-bold">4</span>
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center justify-between">
                          <span className="text-blue-800 font-semibold text-sm">Ïö∞Ïàò (4Ï†ê)</span>
                          <span className="text-blue-600 text-xs bg-blue-100 px-2 py-1 rounded-full">70-89% ÏàòÏ§Ä</span>
                        </div>
                        <p className="text-blue-700 text-xs mt-1">Ìï¥Îãπ ÏòÅÏó≠ÏóêÏÑú ÌèâÍ∑† Ïù¥ÏÉÅÏùò Ïö∞ÏàòÌïú Ïó≠ÎüâÏùÑ Î≥¥Ïú†ÌïòÍ≥† ÏûàÏùå</p>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-3">
                      <div className="w-12 h-6 bg-gradient-to-r from-yellow-400 to-yellow-600 rounded-full flex items-center justify-center">
                        <span className="text-white text-xs font-bold">3</span>
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center justify-between">
                          <span className="text-yellow-800 font-semibold text-sm">Î≥¥ÌÜµ (3Ï†ê)</span>
                          <span className="text-yellow-600 text-xs bg-yellow-100 px-2 py-1 rounded-full">50-69% ÏàòÏ§Ä</span>
                        </div>
                        <p className="text-yellow-700 text-xs mt-1">Ìï¥Îãπ ÏòÅÏó≠ÏóêÏÑú ÌèâÍ∑†Ï†ÅÏù∏ ÏàòÏ§ÄÏùò Ïó≠ÎüâÏùÑ Î≥¥Ïú†ÌïòÍ≥† ÏûàÏùå</p>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-3">
                      <div className="w-12 h-6 bg-gradient-to-r from-orange-400 to-orange-600 rounded-full flex items-center justify-center">
                        <span className="text-white text-xs font-bold">2</span>
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center justify-between">
                          <span className="text-orange-800 font-semibold text-sm">Í∞úÏÑ† ÌïÑÏöî (2Ï†ê)</span>
                          <span className="text-orange-600 text-xs bg-orange-100 px-2 py-1 rounded-full">30-49% ÏàòÏ§Ä</span>
                        </div>
                        <p className="text-orange-700 text-xs mt-1">Ìï¥Îãπ ÏòÅÏó≠ÏóêÏÑú Í∏∞Î≥∏Ï†ÅÏù∏ Ïó≠ÎüâÏùÄ ÏûàÏúºÎÇò Í∞úÏÑ†Ïù¥ ÌïÑÏöîÌï®</p>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-3">
                      <div className="w-12 h-6 bg-gradient-to-r from-red-400 to-red-600 rounded-full flex items-center justify-center">
                        <span className="text-white text-xs font-bold">1</span>
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center justify-between">
                          <span className="text-red-800 font-semibold text-sm">Îß§Ïö∞ Î∂ÄÏ°± (1Ï†ê)</span>
                          <span className="text-red-600 text-xs bg-red-100 px-2 py-1 rounded-full">0-29% ÏàòÏ§Ä</span>
                        </div>
                        <p className="text-red-700 text-xs mt-1">Ìï¥Îãπ ÏòÅÏó≠ÏóêÏÑú Ïó≠ÎüâÏù¥ Î∂ÄÏ°±ÌïòÏó¨ ÏßëÏ§ëÏ†ÅÏù∏ Í∞úÏÑ†Ïù¥ ÌïÑÏöîÌï®</p>
                      </div>
                    </div>
                  </div>
                  
                  {/* ÌèâÍ∞Ä Î∞©Î≤ï ÏïàÎÇ¥ */}
                  <div className="mt-4 p-3 bg-white/70 rounded-lg border border-blue-100">
                    <div className="flex items-center mb-2">
                      <span className="text-blue-600 font-semibold text-sm mr-2">üí° ÌèâÍ∞Ä Î∞©Î≤ï</span>
                    </div>
                    <p className="text-blue-700 text-xs leading-relaxed">
                      Í∞Å Î¨∏Ìï≠Ïùò <strong>ÌñâÎèôÏßÄÌëú</strong>Î•º ÍººÍººÌûà ÏùΩÏñ¥Î≥¥ÏãúÍ≥†, ÌòÑÏû¨ Í∑ÄÏÇ¨Ïùò ÏÉÅÌô©Í≥º Í∞ÄÏû• ÏùºÏπòÌïòÎäî ÏàòÏ§ÄÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî. 
                      Ï†ïÌôïÌïú ÏßÑÎã®ÏùÑ ÏúÑÌï¥ <strong>Í∞ùÍ¥ÄÏ†ÅÏù¥Í≥† ÏÜîÏßÅÌïú ÌèâÍ∞Ä</strong>Í∞Ä Ï§ëÏöîÌï©ÎãàÎã§.
                    </p>
                  </div>
                </div>

                {/* ÏßàÎ¨∏Î≥Ñ Ï†ïÌôïÌïú ÌñâÎèôÏßÄÌëú Í∏∞Î∞ò ÎãµÎ≥Ä ÏòµÏÖò */}
                <div className="space-y-4">
                  <h4 className="font-semibold text-gray-800 mb-4">
                    ÌñâÎèôÏßÄÌëúÎ≥Ñ ÌèâÍ∞Ä (Ìï¥ÎãπÌïòÎäî ÏàòÏ§ÄÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî)
                  </h4>
                  
                  <div className="space-y-3">
                    {currentQuestion && getQuestionBehaviorIndicators(currentQuestion.id).map((indicator) => {
                      const isSelected = formState.answers[currentQuestion.id] === indicator.score;
                      return (
                        <button
                          key={indicator.score}
                          onClick={() => {
                            // ÎØ∏ÎãµÎ≥Ä Î¨∏Ìï≠Ïù¥ ÏûàÏúºÎ©¥ ÏûêÎèô Ïù¥Îèô Î™®Îìú, ÏóÜÏúºÎ©¥ ÏùºÎ∞ò Î™®Îìú
                            const unansweredCount = REAL_45_QUESTIONS.length - Object.keys(formState.answers).length;
                            if (unansweredCount > 1) {
                              handleAnswerWithAutoMove(currentQuestion.id, indicator.score);
                            } else {
                              handleAnswer(currentQuestion.id, indicator.score);
                            }
                          }}
                          className={`
                            w-full p-4 text-left border-2 rounded-lg transition-all duration-300 transform
                            ${isSelected
                              ? `${indicator.color} ${indicator.bgColor} border-current shadow-xl scale-[1.02] ring-2 ring-blue-200`
                              : 'border-gray-200 hover:border-blue-300 hover:bg-blue-50 hover:shadow-md hover:scale-[1.01]'
                            }
                          `}
                        >
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <div className="flex items-center mb-2">
                                <span className="font-semibold text-lg mr-3">
                                  {indicator.label}
                                </span>
                                <div className={`
                                  flex items-center px-3 py-1 rounded-full text-sm font-bold transition-all duration-300
                                  ${isSelected 
                                    ? 'bg-white text-blue-600 shadow-md ring-2 ring-blue-300 animate-pulse' 
                                    : 'bg-gray-100 text-gray-600'
                                  }
                                `}>
                                  <span className="mr-1">‚≠ê</span>
                                  <span>{indicator.score}Ï†ê</span>
                                  {isSelected && <span className="ml-1 text-green-500">‚úì</span>}
                                </div>
                              </div>
                              <div className="mb-2">
                                <span className="text-sm font-medium text-blue-600">
                                  {indicator.keyword}
                                </span>
                              </div>
                              <p className="text-sm text-gray-700 leading-relaxed mb-3">
                                {indicator.description}
                              </p>
                              {indicator.actionItems.length > 0 && (
                                <div className="text-xs text-gray-600">
                                  <span className="font-medium">Ï£ºÏöî Ïã§ÌñâÍ≥ºÏ†ú: </span>
                                  {indicator.actionItems.slice(0, 2).join(', ')}
                                  {indicator.actionItems.length > 2 && ' Îì±'}
                                </div>
                              )}
                            </div>
                          </div>
                        </button>
                      );
                    })}
                  </div>
                </div>

                {/* ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
                <div className="flex justify-between pt-6">
                  <Button
                    variant="outline"
                    onClick={handlePrev}
                    disabled={formState.currentQuestion === 0}
                  >
                    <ChevronLeft className="mr-2 h-4 w-4" />
                    Ïù¥Ï†Ñ
                  </Button>

                  {formState.currentQuestion === REAL_45_QUESTIONS.length - 1 ? (
                    <Button
                      onClick={() => {
                        if (answeredCount < REAL_45_QUESTIONS.length) {
                          setShowMissingAnswerAlert(true);
                          setTimeout(() => setShowMissingAnswerAlert(false), 3000);
                          return;
                        }
                        handleSubmit();
                      }}
                      disabled={isSubmitting}
                      className={`px-8 transition-all duration-300 ${
                        answeredCount < REAL_45_QUESTIONS.length 
                          ? 'bg-gray-400 hover:bg-gray-500 cursor-not-allowed' 
                          : 'bg-green-600 hover:bg-green-700'
                      }`}
                    >
                      {isSubmitting ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          Ï†úÏ∂ú Ï§ë...
                        </>
                      ) : (
                        <>
                          <Check className="mr-2 h-4 w-4" />
                          ÏßÑÎã® ÏôÑÎ£å {answeredCount < REAL_45_QUESTIONS.length && `(${REAL_45_QUESTIONS.length - answeredCount}Í∞ú ÎÇ®Ïùå)`}
                        </>
                      )}
                    </Button>
                  ) : (
                    <div className="flex flex-col items-end">
                      {currentQuestion && !formState.answers[currentQuestion.id] && (
                        <div className="mb-2 text-sm text-red-600 bg-red-50 px-3 py-1 rounded-full border border-red-200 animate-pulse">
                          ‚ö†Ô∏è Ï†êÏàòÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî (ÌïÑÏàò)
                        </div>
                      )}
                      <Button
                        onClick={handleNext}
                        disabled={!currentQuestion || !formState.answers[currentQuestion.id]}
                        className={`transition-all duration-300 ${
                          !currentQuestion || !formState.answers[currentQuestion.id] 
                            ? 'bg-gray-300 hover:bg-gray-300 cursor-not-allowed opacity-50' 
                            : 'bg-blue-600 hover:bg-blue-700'
                        }`}
                      >
                        Îã§Ïùå
                        <ChevronRight className="ml-2 h-4 w-4" />
                      </Button>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </AnimatePresence>

        {/* Ï†ÄÏû• Î≤ÑÌäº */}
        <div className="mt-6 text-center">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => {
              toast({
                title: "ÏûêÎèô Ï†ÄÏû•Îê®",
                description: "ÏßÑÌñâ ÏÉÅÌô©Ïù¥ ÏûêÎèôÏúºÎ°ú Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.",
              });
            }}
          >
            <Save className="mr-2 h-4 w-4" />
            ÏßÑÌñâÏÉÅÌô© ÏûêÎèô Ï†ÄÏû•Îê®
          </Button>
        </div>
              </div>

        {/* ÏßÑÌñâ ÏÉÅÌô© ÏïàÎÇ¥ Î™®Îã¨ */}
        {showProgressGuide && (
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 p-4">
            <div className="w-full max-w-md rounded-2xl shadow-2xl bg-white overflow-hidden animate-in fade-in-0 zoom-in-95 duration-300">
              <div className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-4">
                <div className="flex items-center gap-2">
                  <span className="text-2xl">üéØ</span>
                  <span className="font-semibold">AI Ïó≠ÎüâÏßÑÎã® ÏãúÏûë!</span>
                </div>
                <p className="text-white/90 text-sm mt-1">45Í∞ú Î¨∏Ìï≠ÏúºÎ°ú Ï†ïÎ∞Ä Î∂ÑÏÑùÏùÑ ÏãúÏûëÌï©ÎãàÎã§</p>
              </div>
              <div className="p-4 space-y-3 text-sm text-gray-700">
                <div className="rounded-lg border bg-blue-50 border-blue-200 p-3">
                  <p className="text-blue-900 font-medium mb-2">üìã ÏßÑÌñâ Î∞©Î≤ï ÏïàÎÇ¥</p>
                  <ul className="text-blue-800/80 space-y-1 text-xs">
                    <li>‚Ä¢ Í∞Å ÏßàÎ¨∏ÏùÑ Ïã†Ï§ëÌûà ÏùΩÍ≥† ÌòÑÏû¨ ÏÉÅÌô©Ïóê ÎßûÎäî Ï†êÏàòÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</li>
                    <li>‚Ä¢ ÏßÑÌñâ ÏÉÅÌô©ÏùÄ ÏûêÎèôÏúºÎ°ú Ï†ÄÏû•Îê©ÎãàÎã§</li>
                    <li>‚Ä¢ Î™®Îì† Î¨∏Ìï≠ ÏôÑÎ£å ÌõÑ Îß•ÌÇ®ÏßÄ Ïä§ÌÉÄÏùº Î≥¥Í≥†ÏÑúÍ∞Ä ÏÉùÏÑ±Îê©ÎãàÎã§</li>
                  </ul>
                </div>
                <div className="text-center">
                  <button
                    onClick={() => setShowProgressGuide(false)}
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg text-sm font-medium hover:bg-blue-700 transition-colors"
                  >
                    ÏãúÏûëÌïòÍ∏∞
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* ÎãµÎ≥Ä ÎàÑÎùΩ ÏïåÎ¶º - Í∞ïÌôîÎêú Î≤ÑÏ†Ñ */}
        {showMissingAnswerAlert && (
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 p-4">
            <div className="w-full max-w-md rounded-2xl shadow-2xl bg-white overflow-hidden animate-in fade-in-0 zoom-in-95 duration-300">
              <div className="bg-gradient-to-r from-red-500 to-red-600 text-white p-6">
                <div className="flex items-center gap-3">
                  <div className="w-12 h-12 bg-white/20 rounded-full flex items-center justify-center">
                    <span className="text-2xl">‚ö†Ô∏è</span>
                  </div>
                  <div>
                    <h3 className="font-bold text-lg">ÎãµÎ≥Ä ÎØ∏ÏôÑÎ£å</h3>
                    <p className="text-red-100 text-sm">Î™®Îì† Î¨∏Ìï≠Ïóê ÎãµÎ≥ÄÌï¥Ï£ºÏÑ∏Ïöî</p>
                  </div>
                </div>
              </div>
              <div className="p-6 space-y-4">
                <div className="text-center">
                  <div className="text-3xl font-bold text-red-600 mb-2">
                    {REAL_45_QUESTIONS.length - answeredCount}Í∞ú
                  </div>
                  <p className="text-gray-700 mb-4">
                    Î¨∏Ìï≠Ïù¥ ÏïÑÏßÅ ÎãµÎ≥ÄÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§
                  </p>
                  <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3 mb-4">
                    <p className="text-yellow-800 text-sm">
                      <strong>Ï†ïÌôïÌïú ÏßÑÎã®</strong>ÏùÑ ÏúÑÌï¥ Î™®Îì† Î¨∏Ìï≠Ïóê ÎãµÎ≥ÄÏù¥ ÌïÑÏöîÌï©ÎãàÎã§
                    </p>
                  </div>
                </div>
                <div className="flex gap-3">
                  <button
                    onClick={() => setShowMissingAnswerAlert(false)}
                    className="flex-1 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg font-medium hover:bg-gray-200 transition-colors"
                  >
                    Í≥ÑÏÜç ÎãµÎ≥ÄÌïòÍ∏∞
                  </button>
                  <button
                    onClick={() => {
                      setShowMissingAnswerAlert(false);
                      // Ï≤´ Î≤àÏß∏ ÎØ∏ÎãµÎ≥Ä Î¨∏Ìï≠ÏúºÎ°ú Ïù¥ÎèôÌïòÍ≥† ÏûêÎèôÌôî Î™®Îìú ÌôúÏÑ±Ìôî
                      goToNextUnansweredQuestion();
                    }}
                    className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors"
                  >
                    ÎØ∏ÎãµÎ≥Ä Î¨∏Ìï≠ÏúºÎ°ú ÏûêÎèô Ïù¥Îèô
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };

export default Real45QuestionForm;